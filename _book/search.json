[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GG3209 - Spatial Analysis with GIS",
    "section": "",
    "text": "About this site\nThis book has been developed as part of the module GG3209 ‚Äì Spatial Analysis with GIS at the School of Geography and Sustainable Development, University of St Andrews. This module is spitted in two parts, the first 4 weeks includes QGIS and Multi-criteria evaluation, the second part related to the use of Python for the use and analysis of spatial data.\nThis part will establish a comprehensive introduction to Python (an easy-to-learn and powerful programming language) and its use for manipulating spatial data and deploying spatial analysis models. Python has been cataloged as one of the most popular programming technologies and is widely used as a scripting language in the GIScience world. If you have signed to this module you will learn how to use Python in multiple environments, more specifically using a popular tool called Jupyter Notebooks, then learn how to manipulate vector and raster data and finish by integrating spatial modelling using coding environments and clustering methods as helpful methodologies for dissertations.\nThis module include Lecture+Lab sessions. Lectures will be delivered first, followed by lab practices included in this site. Students will be expected to work on these during the lab sessions but may also have to continue their own for the rest of the week, since the scheduled time may not be sufficient to finish everything.\nAll students enrolled in GG3209 have access to the University‚Äôs ArcGIS Online Organisational Account using their University credentials. We will use this platform in some of the Labs. If you havent experimenting and working with this platform before, to get started, please log in at: üëâ https://uostandrews.maps.arcgis.com\n\n\nVideo\nSign In to ArcGIS Online St Andrews",
    "crumbs": [
      "Home",
      "About this site"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Intro",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "gg3209_install_guide.html",
    "href": "gg3209_install_guide.html",
    "title": "Step 1. Python Environment Installation",
    "section": "",
    "text": "Prerequisites\nThis guide provides step-by-step instructions for setting up the Python environment for second part of the module GG3209 on Windows and macOS. The environment includes all necessary libraries for data handling, clustering, visualization, large datasets, and hotspot analysis.\nEstimated time to install: 20 to 30 minutes.\nBefore starting, ensure you have:",
    "crumbs": [
      "Home",
      "Step 1. Python Environment Installation"
    ]
  },
  {
    "objectID": "gg3209_install_guide.html#prerequisites",
    "href": "gg3209_install_guide.html#prerequisites",
    "title": "Step 1. Python Environment Installation",
    "section": "",
    "text": "A stable internet connection (large downloads required)\nAt least 5GB of free disk space\nAdministrator privileges on your computer\nBasic familiarity with command line interface (we will have a show demo about this during the lectures)\n\n\n\n\n\n\n\nCaution\n\n\n\n\n\nIf you don‚Äôt know how to validate this, please make an appointment with our IT service person who can support you with this at gsditsupport@st-andrews.ac.uk",
    "crumbs": [
      "Home",
      "Step 1. Python Environment Installation"
    ]
  },
  {
    "objectID": "gg3209_install_guide.html#installing-miniconda",
    "href": "gg3209_install_guide.html#installing-miniconda",
    "title": "Step 1. Python Environment Installation",
    "section": "1. Installing Miniconda",
    "text": "1. Installing Miniconda\nMiniconda provides a clean, minimal Python installation with only essential packages. This ensures all students start with identical environments and reduces potential conflicts. It‚Äôs lightweight, fast, and gives us complete control over installed packages. The installation of this program relies on the operating system you have, thus use the instructions based on that:\n\nWindows Installation\n\nDownload Miniconda:\n\nVisit https://docs.conda.io/en/latest/miniconda.html\nDownload ‚ÄúMiniconda3 Windows 64-bit‚Äù (approximately 50MB)\nImportant: Download the Python 3.10 version specifically\n\nInstall Miniconda:\n\nDouble-click the downloaded .exe file\nClick ‚ÄúNext‚Äù through the installation wizard\nCRITICAL: When asked about PATH, select ‚ÄúAdd Miniconda3 to my PATH environment variable‚Äù\nAccept all other default settings\nComplete installation (takes 2-3 minutes)\n\nVerify Installation:\n\nOpen Command Prompt (Press Win + R, type cmd, press Enter)\nType conda --version and press Enter\nYou should see: conda 23.x.x (or similar version number)\nType python --version and press Enter\nYou should see: Python 3.10.x\n\n\n\n\nmacOS Installation\n\nDownload Miniconda:\n\nVisit https://docs.conda.io/en/latest/miniconda.html\nFor Apple Silicon Macs (M1/M2): Download ‚ÄúMiniconda3 macOS Apple M1 64-bit pkg‚Äù\nFor Intel Macs: Download ‚ÄúMiniconda3 macOS Intel x86 64-bit pkg‚Äù\nImportant: Download the Python 3.10 version specifically\n\nInstall Miniconda:\n\nDouble-click the downloaded .pkg file\nFollow the installation wizard\nAccept all default settings\nComplete installation\n\nVerify Installation:\n\nOpen Terminal (Press Cmd + Space, type ‚ÄúTerminal‚Äù, press Enter)\nType conda --version and press Enter\nYou should see: conda 23.x.x (or similar version number)\nType python --version and press Enter\nYou should see: Python 3.10.x\n\n\n\n\nPost-Installation Setup (All Students)\nAfter successful installation, run these commands to ensure consistency:\n# Update conda to latest version\nconda update -n base -c defaults conda\n\n# Configure conda for optimal performance\nconda config --set auto_activate_base false\nconda config --add channels conda-forge\nconda config --set channel_priority strict\n\n# Verify configuration\nconda info\nExpected Output: You should see conda-forge listed as a channel with highest priority.",
    "crumbs": [
      "Home",
      "Step 1. Python Environment Installation"
    ]
  },
  {
    "objectID": "gg3209_install_guide.html#creating-the-environment",
    "href": "gg3209_install_guide.html#creating-the-environment",
    "title": "Step 1. Python Environment Installation",
    "section": "2. Creating the Environment",
    "text": "2. Creating the Environment\n\nStep 1: Download the Environment File\nSave the environment configuration as environment.yml in a folder of your choice (e.g., Documents/gg3209/).\n\n\nStep 2: Open Command Line Interface\n\nWindows Students\n\nPress Win + R, type cmd, press Enter\nAlternative: Search for ‚ÄúCommand Prompt‚Äù in Start Menu\n\n\n\n\n\n\nImportant\n\n\n\nUse Command Prompt, NOT PowerShell or other terminals\n\n\n\n\n\nmacOS Students\n\nPress Cmd + Space, type ‚ÄúTerminal‚Äù, press Enter\nAlternative: Go to Applications &gt; Utilities &gt; Terminal\n\n\n\n\n\n\nImportant\n\n\n\nUse Terminal, NOT other command line apps\n\n\n\n\n\n\nStep 3: Navigate to Your Project Directory\nAll students should create the same folder structure:\n# Windows students\nmkdir C:\\gg3209 #sds stands for spatial dtata science \ncd C:\\gg3209\n\n# macOS students\nmkdir ~/gg3209\ncd ~/gg3209\n\n\nStep 4: Download and Verify Environment File\nBefore creating the environment, ensure you have the correct file:\n\nSave the environment.yml file in your project directory. This file is located in Moodle, go there and download it and place it in the project directory you created earlier.\nVerify the file exists:\n\n# All students run this command\ndir environment.yml    # Windows\nls environment.yml     # macOS\nYou should see the file listed. If not, ensure you saved it correctly.\n\n\nStep 5: Create the Environment (Critical Step)\nThis is where consistency matters most:\n# Create environment from file\nconda env create -f environment.yml\n\n# This will take 15-30 minutes\n# You will see many packages being downloaded and installed\n# Wait for \"done\" message before proceeding\nExpected Output:\nCollecting package metadata (repodata.json): done\nSolving environment: done\nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\n#\n# To activate this environment, use\n#\n#     $ conda activate spatial-data-science\n#\n# To deactivate an active environment, use\n#\n#     $ conda deactivate\n\n\nStep 6: Activate the Environment\nAll students must activate the environment before using it ‚Äì THIS IS VERY IMPORTANT:\n# Activate the environment\nconda activate gg3209\nSuccess Indicator: Your command prompt should now show (gg3209) at the beginning:\n# Windows example\n(gg3209) C:\\gg3209&gt;\n\n# macOS example\n(gg3209) username@computer:~/gg3209$\n\n\nStep 7: Final Verification\nAll students run the same verification script:\nOnce you have created your python environment, now it is important you test that everything is properly installed. Using the same terminal or command prompt window run the following command.\n# Make sure environment is activated (optional if you know you have activated it)\nconda activate gg3209\n\n# Run the test\npython test_installation.py\n\n------\n# Windows example\n(gg3209) C:\\gg3209\\&gt; python verification_script.py\n\n# macOS example\n(gg3209) username@computer:~/gg3209/$ python verification_script.py\nExpected Output for All Students:\nPython version: 3.10.x\nPython location: [path to conda environment]\n‚úì All required libraries imported successfully!\n‚úì Environment setup is complete and consistent!\n‚úì GeoPandas version: 1.1.1\n‚úì Pandas version: 2.3.1\n‚úì NumPy version: 1.26.4\nIf successful, you should see version numbers and check-marks.",
    "crumbs": [
      "Home",
      "Step 1. Python Environment Installation"
    ]
  },
  {
    "objectID": "gg3209_install_guide.html#running-jupyter-lab",
    "href": "gg3209_install_guide.html#running-jupyter-lab",
    "title": "Step 1. Python Environment Installation",
    "section": "3. Running Jupyter Lab",
    "text": "3. Running Jupyter Lab\n\nStarting Jupyter Lab\n# Make sure environment is activated (optional if you know you have activated it)\nconda activate gg3209\n\n# Make sure you are in your project directory e.g. GG3209\ncd GG3209\n\n# Launch Jupyter Lab\njupyter lab\nThis will:\n- Start the Jupyter server\n- Open your default web browser\n- Display the Jupyter Lab interface\n\n\nCreating Your First Notebook\n\nClick ‚ÄúPython 3 (ipykernel)‚Äù under ‚ÄúNotebook‚Äù\nTest with a simple spatial analysis:\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport geodatasets\n\n# Create a simple test\nworld = gpd.read_file(geodatasets.get_path(\"naturalearth.land\"))\nworld.plot(figsize=(10, 6))\nplt.title('World Map Test')\nplt.show()\n\n\nStopping Jupyter Lab\n\nIn your browser: File &gt; Shut Down\nIn command line: Press Ctrl + C (Windows) or Cmd + C (Mac)",
    "crumbs": [
      "Home",
      "Step 1. Python Environment Installation"
    ]
  },
  {
    "objectID": "gg3209_install_guide.html#gg3209-specific-setup-instructions",
    "href": "gg3209_install_guide.html#gg3209-specific-setup-instructions",
    "title": "Step 1. Python Environment Installation",
    "section": "4. GG3209-Specific Setup Instructions",
    "text": "4. GG3209-Specific Setup Instructions\n\nFirst Day of Class Checklist\nAll students must complete before first lab:\n\nInstall Miniconda (Python 3.10)\nCreate spatial-data-science environment\nActivate environment successfully\nRun verification script (must pass)\nStart Jupyter Lab (must open in browser)\nCreate test notebook with basic spatial analysis\n\n\n\nWeekly Environment Check\nRun this command weekly to ensure consistency:\npython -c \"\nimport geopandas as gpd\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport folium\nfrom esda.getisord import G_Local\nfrom sklearn.cluster import DBSCAN\nprint('‚úì Environment is working correctly')\nprint(f'‚úì GeoPandas version: {gpd.__version__}')\nprint(f'‚úì Pandas version: {pd.__version__}')\n\"\n\n\nSubmission Requirements\nFor all assignments, include this environment information:\n# Add this cell at the top of every notebook\nimport sys\nimport geopandas as gpd\nimport pandas as pd\n\nprint(f\"Python version: {sys.version}\")\nprint(f\"GeoPandas version: {gpd.__version__}\")\nprint(f\"Pandas version: {pd.__version__}\")\nprint(f\"Environment: gg3209\")",
    "crumbs": [
      "Home",
      "Step 1. Python Environment Installation"
    ]
  },
  {
    "objectID": "gg3209_install_guide.html#next-steps",
    "href": "gg3209_install_guide.html#next-steps",
    "title": "Step 1. Python Environment Installation",
    "section": "5. Next Steps",
    "text": "5. Next Steps\nOnce your environment is set up:\n\nComplete the verification tests\nTry the sample notebook\nExplore the example datasets (Data Sources section)\nBegin the Guideline Introduction to GIT\nNow you are all set to start with Lab No 1, Lab No 2‚Ä¶and so on\nMake sure you push your changes, updates and work regularly to your Repo in GitHub.\n\n\n\n\n\n\n\nNote\n\n\n\nYour python environment for this course GG3209 is now ready. Now you need to install GIT and create a GitHub account to have everything you need to practice all your Python skills., there are some steps you need to recall while you work on this course, but with practice you will eventually memorise most of the critial steps.\nMove to Step No 2.",
    "crumbs": [
      "Home",
      "Step 1. Python Environment Installation"
    ]
  },
  {
    "objectID": "gg3209_install_guide.html#useful-resources",
    "href": "gg3209_install_guide.html#useful-resources",
    "title": "Step 1. Python Environment Installation",
    "section": "Useful resources",
    "text": "Useful resources\n\nLearning Materials\n\nGeopandas Documentation: https://geopandas.org/\nPySAL Documentation: https://pysal.org/\nSpatial Data Science Book: https://geographicdata.science/book/\n\n\n\nData Sources\n\nNatural Earth: https://www.naturalearthdata.com/\nOpenStreetMap: https://www.openstreetmap.org/\nCensus Data: https://www.census.gov/\n\n\n\nCommunity Support\n\nStack Overflow: Use tags geopandas, spatial-analysis, python\nGitHub Issues: For specific library problems\nReddit: r/gis and r/Python communities\n\n\nThis guide was created for the GG3209 Spatial Analysis with GIS students at SGSD University of St Andrews. For questions or suggestions, please create an issue in this book repository. 2025",
    "crumbs": [
      "Home",
      "Step 1. Python Environment Installation"
    ]
  },
  {
    "objectID": "git_guide.html",
    "href": "git_guide.html",
    "title": "Step 2. Introduction to Git",
    "section": "",
    "text": "What is Version Control?\nEstimated time to install: 40 minutes\nVersion control is a system that records changes to files over time so that you can recall specific versions later. Think of it as a detailed history of your project that allows you to:\n%%| fig-cap: \"Version Control Timeline\"\n%%| fig-align: center\n%%| fig-responsive: false\n\ngitGraph TB:\n    commit id: \"Initial spatial analysis\"\n    commit id: \"Add coordinate system\"\n    branch develop\n    commit id: \"Fix projection error\"\n    commit id: \"start documentation\"\n    checkout main\n    commit id: \"map analysis\"\n    merge develop id: \"Pull Request\"\n    commit id: \"Add buffer analysis\"\n    commit id: \"Final report\"",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#what-is-version-control",
    "href": "git_guide.html#what-is-version-control",
    "title": "Step 2. Introduction to Git",
    "section": "",
    "text": "Track every change made to your files\nRevert to previous versions when needed\nCollaborate with others without conflicts\nUnderstand who made what changes and when",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#why-version-control-matters-in-spatial-data-science",
    "href": "git_guide.html#why-version-control-matters-in-spatial-data-science",
    "title": "Step 2. Introduction to Git",
    "section": "Why Version Control Matters in Spatial Data Science",
    "text": "Why Version Control Matters in Spatial Data Science\nIn spatial data science, you‚Äôre often working with:\n\nComplex datasets: Shapefiles, rasters, GPS data, satellite imagery\nMultiple software tools: R, Python, QGIS, ArcGIS\nIterative analysis: Testing different spatial models and parameters\nCollaborative projects: Working with field teams, other researchers\nReproducible research: Ensuring your spatial analysis can be replicated\n\n\nCommon scenario\nImagine you‚Äôre analyzing urban green spaces for any kind of project using R, and then you have something like:\n\nurban_greenspace_analysis.R\nurban_greenspace_analysis_v2.R\nurban_greenspace_analysis_v2_final.R\nurban_greenspace_analysis_v2_final_ACTUALLY_FINAL.R\nurban_greenspace_analysis_v2_final_ACTUALLY_FINAL_supervisors_comments.R\n\nSound familiar? This approach leads to:\n\nConfusion about which version is current\nLost work when files get overwritten\nDifficulty tracking what changed between versions\nProblems when collaborating with others\n\n\n\nGit and GitHub\nAnother important component we need in our environment is git, the tool that provides version control for any of our projects. While version control is a systematic approach to recording changes you make in a file or set of files over time.\nThis is important, especially if you work with other collaborators, as you can track the history, see what changed and recall specific versions if needed. In this course, we will incorporate git to teach you how to create a branch, clone someone else‚Äôs repositories, and give you a brief introduction to this important workflow, but also how you can commit your progress in one of the most popular git tools currently available. GitHub.\n\n\nKey Terminology\n\nRepository (repo): A folder containing your project files and their complete history\nCommit: A snapshot of your project at a specific point in time\nRemote: A version of your repository stored on a server (like GitHub)\nClone: Creating a local copy of a remote repository\nPush: Sending your local changes to the remote repository\nPull: Retrieving changes from the remote repository to your local copy\n\n\n\nThe Git Workflow\n\n\n\n\n\nflowchart TD\n    A[Working Directory&lt;br/&gt;Your project files] --&gt; |Initial command| B[git add]\n    B --&gt; C[Staging Area&lt;br/&gt;Files ready to commit]\n    C --&gt; |next command| D[git commit]\n    D --&gt; E[Local Repository&lt;br/&gt;Your project history]\n    E --&gt; |final command| F[git push]\n    F --&gt; G[Remote Repository&lt;br/&gt;GitHub]\n    G --&gt; |Do this before start Working| H[git pull]\n    H --&gt; A\n\n\n Basic Git Workflow",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#commands-to-move-through-drives-and-directories",
    "href": "git_guide.html#commands-to-move-through-drives-and-directories",
    "title": "Step 2. Introduction to Git",
    "section": "Commands to move through drives and directories:",
    "text": "Commands to move through drives and directories:\ncd‚ÄîShort for ‚Äúchange directory‚Äù, to move through the directory structure (in the same drive), as in cd C:\\Users\\fbenitez\\Downloads\ncd.. ‚Äîto move to the upper level in your directories, so if you need to move from C:\\Users\\fbenitez\\Downloads to C:\\Users\\fbenitez\\\n\nX: ‚ÄîTo switch to a different drive, type the drive name followed by colon, as in D: to switch to drive D:\\\ncls (Windows) or clear (macOS) ‚ÄîTo clean your terminal, it would help you to have a clean terminal and avoid mistakes.\ndir(windows)\nls (macOs) ‚ÄîTo list current directory contents.\n\nGo to your Documents folder in your computer. Create a folder call it MyFirstRepo\nOpen a terminal/command prompt, browse from the folder you are in to the new one, like the following illustrations.\n\n\nYou can also use some commands to run programs in your system which I know sounds silly as we are used to finding the icon and tap/click to get it open, but that‚Äôs what happens underneath every time you open a program, here are some examples:\npython ‚ÄîStarting the python command line interface, you can use the exit() command to get out of the python interface, and recover the terminal mode.\n\nTry the example illustrated in the following image:",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#sign-up-for-github",
    "href": "git_guide.html#sign-up-for-github",
    "title": "Step 2. Introduction to Git",
    "section": "1.1 Sign Up for GitHub",
    "text": "1.1 Sign Up for GitHub\n\nGo to github.com\nClick ‚ÄúSign up‚Äù\nChoose a username (take a note of this as you will use it later in this Lab)\nUse your university email address ideally., but you can opt to use another email, just recall it when you need to recover your password. (take a note of this as you will use it later in this Lab)\nCreate a strong password\nVerify your account",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#configure-your-profile",
    "href": "git_guide.html#configure-your-profile",
    "title": "Step 2. Introduction to Git",
    "section": "1.2 Configure Your Profile",
    "text": "1.2 Configure Your Profile\n\n\n\n\n\n\nNote\n\n\n\nThere is a chance you won‚Äôt open GitHub for anything else than this course, but also there is another chance where you will ended up working as spatial data scientist, or consultant into a collaborative development team. If that is your case, improving and configuring your GitHub account, as well as familiarizing about how it works would be definitively beneficial for you. For instance there are lot of companies or institutions who are asking or expecting you to have some well-curated repositories that prove your skills in Python and GitHub. Thus take some time to enhance your profile by adding this little extra information.\n\n\n\nAdd a profile picture\nAdd a bio mentioning your interest in spatial data science\nInclude your university affiliation\nConsider making your profile public for academic networking",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#installing-git",
    "href": "git_guide.html#installing-git",
    "title": "Step 2. Introduction to Git",
    "section": "2.1 Installing Git",
    "text": "2.1 Installing Git\n\nWindows\n\nDownload Git from git-scm.com\nRun the installer\nUse default settings (recommended)\nChoose ‚ÄúGit Bash‚Äù as your terminal\n\n\n\nmacOS\n\nInstall via Homebrew: brew install git\nOr download from git-scm.com\n\n\n\nLinux\n# Ubuntu/Debian\nsudo apt-get install git\n\n# CentOS/RHEL\nsudo yum install git",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#initial-git-configuration",
    "href": "git_guide.html#initial-git-configuration",
    "title": "Step 2. Introduction to Git",
    "section": "2.2 Initial Git Configuration",
    "text": "2.2 Initial Git Configuration\nOpen your terminal (Git Bash on Windows, Terminal on macOS/Linux) and run:\n# Set your name (use your real name)\ngit config --global user.name \"Your Name\"\n\n# Set your email (use your GitHub email)\ngit config --global user.email \"your.email@st-andrews.ac.uk\"\n\n# Verify configuration\ngit config --list",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#setting-up-a-project-structure",
    "href": "git_guide.html#setting-up-a-project-structure",
    "title": "Step 2. Introduction to Git",
    "section": "3.1 Setting Up a Project Structure",
    "text": "3.1 Setting Up a Project Structure\nNow, in order to practice and validate that Git has been properly installed, let‚Äôs create a fictional spatial data science project for analyzing urban heat islands, but let‚Äôs try to use the terminal or the command prompt windows to practice.\n\nOpen a Terminal or Command prompt and run the following commands.\n\n# Create project directory\nmkdir urban_heat_island_analysis\ncd urban_heat_island_analysis\n\n# Create typical spatial data science structure\nmkdir data\nmkdir data/raw\nmkdir data/processed\nmkdir scripts\nmkdir outputs\nmkdir docs",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#initialize-git-repository",
    "href": "git_guide.html#initialize-git-repository",
    "title": "Step 2. Introduction to Git",
    "section": "3.2 Initialize Git Repository",
    "text": "3.2 Initialize Git Repository\n# Initialize git repository\ngit init\nThis creates a hidden .git folder that stores all version control information.",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#create-project-files",
    "href": "git_guide.html#create-project-files",
    "title": "Step 2. Introduction to Git",
    "section": "3.3 Create Project Files",
    "text": "3.3 Create Project Files\nWe will generate several files within this pilot project, so you can see how the repo can evolve and changes over time in the same way it happens when you work on a real project. The first file you need is the README which helps to describe what your project or repo is about.\n\nCreate a README file:\n# Create README.md\ntouch README.md\nOpen the README.md file and add content:\n# Urban Heat Island Analysis\n\n## Project Overview\nThis project analyzes urban heat island effects in [Your City] using satellite thermal data and land cover classifications.\n\n## Data Sources\n- Landsat 8 thermal infrared data\n- OpenStreetMap building footprints\n- Local weather station data\n\n## Methods\n- Temperature retrieval from satellite imagery\n- Spatial interpolation techniques\n- Statistical analysis of temperature patterns\n\n## Software Requirements\n- R (version 4.0+)\n- Required packages: sf, terra, ggplot2, dplyr\n\n## File Structure\n\nurban_heat_island_analysis/\n‚îú‚îÄ‚îÄ data/\n‚îÇ‚îú‚îÄ‚îÄ raw/ # Original data files\n‚îÇ‚îî‚îÄ‚îÄ processed/ # Cleaned and processed data \n‚îú‚îÄ‚îÄ scripts/ # R scripts for analysis\n‚îú‚îÄ‚îÄ outputs/ # Maps, plots, and results\n‚îî‚îÄ‚îÄ docs/ # Documentation and reports\n\n## Contact\n[Your Name] - [Your Email]  \n\n\nCreate a .gitignore file:\n\n\n\n\n\n\n\nWarning\n\n\n\nThis is a very essential and relevant step when you work with repositories, in particular when working with spatial data science as we usually have to deal with large datasets, however cloud platforms ‚ÄìGithub have storage limitations (e.g 50MB, 100MG). Sometimes also the jupyter notebooks can weight more than the storage limitations given by github. Therefore is super IMPORTANT that you create a file that tells your local repo to ignore those big files so you don‚Äôt have any trouble when you push the files to the cloud.\n\n\n\ntouch .gitignore\nOpen the .gitignore file and add common files to ignore, you could add more data extensions later, or you could also add entire folders.\n\n\n\n\n\n\nNote\n\n\n\nIf you are trying to open the .gitignore file and you can‚Äôt find it in the created folder. This is because by default, operating systems hide files that start with a dot (.) to prevent accidental modification of system files. But how to make these files visible?\n\n\n\n\n\n\n\n\nHow to make them visible?\n\n\n\n\n\n\nWindows Users\n\nMethod 1: Using File Explorer (Recommended)\n\nOpen File Explorer\n\nPress Windows + E on your keyboard, or\nClick the folder icon in your taskbar\n\nNavigate to Your Project Folder\n\nGo to the folder containing your Git repository\n\nAccess View Options\n\nClick on the View tab in the ribbon at the top\nLook for the ‚ÄúShow/hide‚Äù section\n\nShow Hidden Files\n\nCheck the box next to Hidden items\nYour .gitignore file should now be visible (it may appear slightly faded)\n\n\n\n\nMethod 2: Using Folder Options (Alternative)\n\nOpen File Explorer and navigate to your project folder\nAccess Folder Options\n\nClick View in the ribbon\nClick Options (or Folder Options)\n\nModify View Settings\n\nIn the popup window, click the View tab\nUnder ‚ÄúAdvanced settings,‚Äù find Hidden files and folders\nSelect Show hidden files, folders, and drives\nClick OK\n\n\n\n\n\nmacOS Users\n\nUsing Finder (Recommended)\n\nOpen Finder\n\nClick the Finder icon in your dock, or\nPress Command + Space and type ‚ÄúFinder‚Äù\n\nNavigate to Your Project Folder\n\nGo to the folder containing your Git repository\n\nShow Hidden Files\n\nPress Command + Shift + . (period)\nHidden files will now appear with a dimmed/transparent look\nYour .gitignore file should be visible\n\nTo Hide Files Again (Optional)\n\nPress Command + Shift + . again to toggle back\n\nOpen the .gitignore File to edit it\n\nWindows: Right-click ‚Üí ‚ÄúOpen with‚Äù ‚Üí Choose a text editor (Notepad, RStudio, etc.)\nmacOS: Right-click ‚Üí ‚ÄúOpen with‚Äù ‚Üí Choose a text editor (TextEdit, RStudio, etc.)\n\n\n\n\n\n\n\nInclude the following lines and save the changes.\n# R files\n.Rproj.user\n.Rhistory\n.RData\n.Ruserdata\n*.Rproj\n\n# Data files (large files)\n*.tif\n*.shp\n*.dbf\n*.prj\n*.shx\n*.zip\n\n# Temporary files\n*~\n*.tmp\n*.temp\n\n# OS files\n.DS_Store\nThumbs.db\n\n# Log files\n*.log\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n__pycache__/\n*.py[codz]\n*$py.class",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#your-first-commit",
    "href": "git_guide.html#your-first-commit",
    "title": "Step 2. Introduction to Git",
    "section": "3.4 Your First Commit",
    "text": "3.4 Your First Commit\n# Check status\ngit status\n\n# Add files to staging area\ngit add .\n\n# Commit with descriptive message\ngit commit -m \"Initial commit: Add project structure and README\"",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#create-github-repository",
    "href": "git_guide.html#create-github-repository",
    "title": "Step 2. Introduction to Git",
    "section": "4.1 Create GitHub Repository",
    "text": "4.1 Create GitHub Repository\n\nLog in to github.com\nClick the ‚Äú+‚Äù icon in the top right\nSelect ‚ÄúNew repository‚Äù\nRepository name: urban_heat_island_analysis\nDescription: ‚ÄúGG3209 pilot project to analyzing urban heat island effects‚Äù\nKeep it public (for academic sharing)\nDon‚Äôt initialize with README (we already have one)\nClick ‚ÄúCreate repository‚Äù",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#connect-local-repository-to-github",
    "href": "git_guide.html#connect-local-repository-to-github",
    "title": "Step 2. Introduction to Git",
    "section": "4.2 Connect Local Repository to GitHub",
    "text": "4.2 Connect Local Repository to GitHub\nGitHub will show you commands to run. Copy and paste these into your terminal:\n# Add GitHub as remote origin\ngit remote add origin https://github.com/yourusername/urban_heat_island_analysis.git \n#Replace this URL with YOUR URL\n\n# Verify remote connection\ngit remote -v\n\n# Push your local repository to GitHub\ngit push -u origin main",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#verify-changes-in-the-cloud-repo",
    "href": "git_guide.html#verify-changes-in-the-cloud-repo",
    "title": "Step 2. Introduction to Git",
    "section": "4.3 Verify changes in the Cloud Repo",
    "text": "4.3 Verify changes in the Cloud Repo\n\nRefresh your GitHub repository page\nYou should see your README.md and .gitignore files\nYour commit message should be visible",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#the-basic-workflow",
    "href": "git_guide.html#the-basic-workflow",
    "title": "Step 2. Introduction to Git",
    "section": "6.1 The Basic Workflow",
    "text": "6.1 The Basic Workflow\n\n\n\n\n\nflowchart TD\n    A[Edit Files] --&gt; B[git pull]\n    B --&gt; C[git status]\n    C --&gt; D[git add]\n    D --&gt; E[git commit]\n    E --&gt; F[git push]\n    F --&gt; G[Continue Working]\n    G --&gt; A\n\n\n Daily Git Workflow \n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nIt is a bit complicated to understand what is underneath all this commands, so the following sequence-diagram represents how information, in particular how the modifications of your files moves around the version control system, thus it is easier for you to understand why do we need to run several commands when we use git.\nInitially you have three folders. One is called Your Folder (this is where all your project are located, eg. Lab No 1, GG3209, etc), then you have a Local repo (a hidden folder that include all the components of version control or git) and finally the Cloud Repo, which is a folder located in the Cloud (e.g GitHub). The goal is to make sure we have all our editions sync and safe in the Cloud, so if eventually our computers breaks, we have a safe and updated copy of our project stored in the Cloud.\n\n\nThis is how a traditional workflow looks like when you work with Git and GitHub, study the steps and make sure you understand what the role of each command is. I expect you to work using these commands during the labs of this module.\n\n\n\n\n\nsequenceDiagram\n    loop \n    autonumber\n    Your Folder-&gt;&gt;+Local Repo: git status\n    Note right of Your Folder: Report All Changes\n    Your Folder-&gt;&gt;+Local Repo: git add\n    Note right of Your Folder: Add all changes&lt;br/&gt;to the staging area\n    Your Folder-&gt;&gt;+Local Repo: git commit\n    Note right of Your Folder: Include all the files&lt;br/&gt;to the local repo    \n    Local Repo-&gt;&gt;+Cloud Repo: git push\n    Note right of Local Repo: upload all changes &lt;br/&gt;to the Cloud repo\n    Local Repo-&gt;&gt;+Cloud Repo: git pull\n    Cloud Repo--&gt;&gt;-Local Repo: pull changes&lt;br/&gt;included in the cloud\n    Note over Cloud Repo,Your Folder: Fetch lastest changes\n    end",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#checking-status-and-history",
    "href": "git_guide.html#checking-status-and-history",
    "title": "Step 2. Introduction to Git",
    "section": "6.2 Checking Status and History",
    "text": "6.2 Checking Status and History\n# Check what files have changed\ngit status\n\n# View commit history\ngit log\n\n# View commit history (compact)\ngit log --oneline\n\n# View changes in files\ngit diff",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#adding-and-committing-changes",
    "href": "git_guide.html#adding-and-committing-changes",
    "title": "Step 2. Introduction to Git",
    "section": "6.3 Adding and Committing Changes",
    "text": "6.3 Adding and Committing Changes\nLet‚Äôs add a spatial analysis script:\n# Create new R script\ntouch scripts/soil_analysis.R\nAdd some content to scripts/soil_analysis.R:\n# Urban Heat Island Analysis\n# GG3209 - Spatial Data Science\n\n# Load required packages\n# library(sf)\n# library(terra)\n# library(ggplot2)\n# library(dplyr)\n\n# Read soil data\n# soil_data &lt;- rast(\"data/raw/landsat_land_use.tif\")\n\n# Read city boundary\n# city_boundary &lt;- st_read(\"data/raw/city_boundary.shp\")\n\n# TODO: Add soil extraction analysis\n# TODO: Add spatial interpolation\n# TODO: Create soil maps\nNow commit these changes:\n# Add the new script\ngit add scripts/soil_analysis.R\n\n# Commit with descriptive message\ngit commit -m \"Add initial soil analysis script\n\n- Set up basic structure for soil analysis\n- Added required package imports\n- Created placeholders for main analysis steps\"\n\n# Push to GitHub\ngit push origin main",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#working-with-multiple-files",
    "href": "git_guide.html#working-with-multiple-files",
    "title": "Step 2. Introduction to Git",
    "section": "6.4 Working with Multiple Files",
    "text": "6.4 Working with Multiple Files\nAdd more project files:\n# Create data processing script\ntouch scripts/data_preprocessing.R\n\n# Create visualization script\ntouch scripts/create_maps.R\n\n# Add all new files\ngit add scripts/\n\n# Commit all changes\ngit commit -m \"Add data preprocessing and mapping scripts\"\n\n# Push to GitHub\ngit push origin main",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#viewing-and-understanding-changes",
    "href": "git_guide.html#viewing-and-understanding-changes",
    "title": "Step 2. Introduction to Git",
    "section": "6.5 Viewing and Understanding Changes",
    "text": "6.5 Viewing and Understanding Changes\n# See what changed in your last commit\ngit show\n\n# Compare current files with last commit\ngit diff HEAD~1\n\n# See changes in a specific file\ngit diff scripts/temperature_analysis.R\n\n\n\n\n\n\nTip\n\n\n\nWell done, now you have experience how Git and Version control work using a fictional project in R., now the rest of this guideline is optional, but there are several sections you could use it during this module. Keep an eye on the following sections where you will find useful information and key steps of working with reproducible research.",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#essential-commands",
    "href": "git_guide.html#essential-commands",
    "title": "Step 2. Introduction to Git",
    "section": "Essential Commands",
    "text": "Essential Commands\n\n\n\nCommand\nPurpose\nExample\n\n\n\n\ngit status\nCheck current status\ngit status\n\n\ngit add\nStage changes\ngit add filename.R\n\n\ngit commit\nSave changes\ngit commit -m \"message\"\n\n\ngit push\nUpload to GitHub\ngit push origin main\n\n\ngit pull\nDownload from GitHub\ngit pull origin main\n\n\ngit log\nView history\ngit log --oneline\n\n\ngit diff\nView changes\ngit diff filename.R",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#configuration-commands",
    "href": "git_guide.html#configuration-commands",
    "title": "Step 2. Introduction to Git",
    "section": "Configuration Commands",
    "text": "Configuration Commands\n\n\n\n\n\n\n\n\nCommand\nPurpose\nExample\n\n\n\n\ngit config --global user.name\nSet name\ngit config --global user.name \"John Doe\"\n\n\ngit config --global user.email\nSet email\ngit config --global user.email \"john@example.com\"\n\n\ngit remote add origin\nAdd remote\ngit remote add origin https://github.com/user/repo.git",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#cloning-an-existing-repository",
    "href": "git_guide.html#cloning-an-existing-repository",
    "title": "Step 2. Introduction to Git",
    "section": "Cloning an Existing Repository",
    "text": "Cloning an Existing Repository\nGitHub is a cloud platform full of resources that you will eventually find useful, and you can create a copy of those great projects and include them as part of your repositories, so you can also replicate their work, or when you are working on a collaborative project, you will need to clone someone else repository, taking all the files included in the Cloud to a Local Repository in your computer.\n# Clone a repository you need to replicate locally\ngit clone https://github.com/username/repository-name.git\n\n# Navigate to the cloned directory\ncd repository-name",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#keeping-your-local-repository-updated",
    "href": "git_guide.html#keeping-your-local-repository-updated",
    "title": "Step 2. Introduction to Git",
    "section": "Keeping Your Local Repository Updated",
    "text": "Keeping Your Local Repository Updated\n# Fetch latest changes from GitHub\ngit pull origin main\n\n# This is equivalent to:\ngit fetch origin main\ngit merge origin/main",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#best-practices-for-collaboration",
    "href": "git_guide.html#best-practices-for-collaboration",
    "title": "Step 2. Introduction to Git",
    "section": "Best Practices for Collaboration",
    "text": "Best Practices for Collaboration\n\nAlways pull before starting work:\n\ngit pull origin main\n\nMake small, frequent commits:\n\ngit add specific_file.R\ngit commit -m \"Fix coordinate system transformation bug\"\n\nWrite clear commit messages:\n\n# Good commit messages\ngit commit -m \"Add buffer analysis for green spaces\"\ngit commit -m \"Fix projection error in temperature raster\"\ngit commit -m \"Update README with data sources\"\n\n# Poor commit messages (avoid these)\ngit commit -m \"stuff\"\ngit commit -m \"fixes\"\ngit commit -m \"work\"",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#working-with-large-data-files",
    "href": "git_guide.html#working-with-large-data-files",
    "title": "Step 2. Introduction to Git",
    "section": "Working with Large Data Files",
    "text": "Working with Large Data Files\nSpatial data files can be very large. Use .gitignore to exclude them:\n# Add to .gitignore\necho \"*.tif\" &gt;&gt; .gitignore\necho \"*.shp\" &gt;&gt; .gitignore\necho \"*.nc\" &gt;&gt; .gitignore\necho \"data/raw/*\" &gt;&gt; .gitignore\n\n# Commit the updated .gitignore\ngit add .gitignore\ngit commit -m \"Update gitignore for large spatial data files\"",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#documenting-data-sources",
    "href": "git_guide.html#documenting-data-sources",
    "title": "Step 2. Introduction to Git",
    "section": "Documenting Data Sources",
    "text": "Documenting Data Sources\nCreate a data documentation file:\ntouch docs/data_sources.md\nAdd comprehensive data documentation:\n# Data Sources\n\n## Landsat 8 Thermal Data\n- **Source**: USGS EarthExplorer\n- **Date**: 2023-07-15\n- **Scene ID**: LC08_L1TP_015033_20230715_20230725_02_T1\n- **Spatial Resolution**: 30m\n- **Bands Used**: Band 10 (Thermal Infrared)\n\n## City Boundary\n- **Source**: OpenStreetMap\n- **Downloaded**: 2023-08-01\n- **Format**: Shapefile\n- **Coordinate System**: WGS84 UTM Zone 33N\n\n## Weather Station Data\n- **Source**: Local Meteorological Service\n- **Period**: 2023-07-01 to 2023-07-31\n- **Variables**: Temperature, Humidity, Wind Speed\n- **Temporal Resolution**: Hourly",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#version-control-for-analysis-results",
    "href": "git_guide.html#version-control-for-analysis-results",
    "title": "Step 2. Introduction to Git",
    "section": "Version Control for Analysis Results",
    "text": "Version Control for Analysis Results\nTrack your analysis outputs:\n# Create results summary\ntouch outputs/analysis_summary.md\n\n# Add and commit\ngit add outputs/analysis_summary.md\ngit commit -m \"Add initial analysis summary template\"",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#viewing-detailed-history",
    "href": "git_guide.html#viewing-detailed-history",
    "title": "Step 2. Introduction to Git",
    "section": "Viewing Detailed History",
    "text": "Viewing Detailed History\n# View detailed log with file changes\ngit log --stat\n\n# View graphical representation\ngit log --graph --oneline --all\n\n# View commits by specific author\ngit log --author=\"Your Name\"\n\n# View commits in date range\ngit log --since=\"2023-08-01\" --until=\"2023-08-31\"",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#comparing-versions",
    "href": "git_guide.html#comparing-versions",
    "title": "Step 2. Introduction to Git",
    "section": "Comparing Versions",
    "text": "Comparing Versions\n# Compare two commits\ngit diff commit1..commit2\n\n# Compare current version with specific commit\ngit diff HEAD~3\n\n# Compare specific files between commits\ngit diff HEAD~1 scripts/temperature_analysis.R",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#reverting-changes",
    "href": "git_guide.html#reverting-changes",
    "title": "Step 2. Introduction to Git",
    "section": "Reverting Changes",
    "text": "Reverting Changes\n# Undo changes in working directory\ngit checkout -- filename.R\n\n# Undo last commit (keep changes)\ngit reset --soft HEAD~1\n\n# Undo last commit (discard changes)\ngit reset --hard HEAD~1\nWarning: Be careful with --hard reset as it permanently deletes changes!",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#using-issues-for-project-management",
    "href": "git_guide.html#using-issues-for-project-management",
    "title": "Step 2. Introduction to Git",
    "section": "Using Issues for Project Management",
    "text": "Using Issues for Project Management\n\nGo to your GitHub repository\nClick ‚ÄúIssues‚Äù tab\nClick ‚ÄúNew issue‚Äù\nCreate issues for different analysis tasks:\n\n‚ÄúDownload and process Landsat data‚Äù\n‚ÄúImplement temperature calculation algorithm‚Äù\n‚ÄúCreate heat island visualization‚Äù",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#using-github-for-documentation",
    "href": "git_guide.html#using-github-for-documentation",
    "title": "Step 2. Introduction to Git",
    "section": "Using GitHub for Documentation",
    "text": "Using GitHub for Documentation\nCreate comprehensive documentation:\n# Create documentation files\nmkdir docs\ntouch docs/methodology.md\ntouch docs/results.md\ntouch docs/conclusions.md",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#making-your-repository-citation-ready",
    "href": "git_guide.html#making-your-repository-citation-ready",
    "title": "Step 2. Introduction to Git",
    "section": "Making Your Repository Citation-Ready",
    "text": "Making Your Repository Citation-Ready\nAdd citation information:\ntouch CITATION.cff\nAdd citation content:\ncff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n  - family-names: \"Your Last Name\"\n    given-names: \"Your First Name\"\n    orcid: \"https://orcid.org/0000-0000-0000-0000\"\ntitle: \"Urban Heat Island Analysis\"\nversion: 1.0.0\ndate-released: 2023-12-01\nurl: \"https://github.com/yourusername/urban_heat_island_analysis\"",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#creating-a-complete-reproducible-environment",
    "href": "git_guide.html#creating-a-complete-reproducible-environment",
    "title": "Step 2. Introduction to Git",
    "section": "Creating a Complete Reproducible Environment",
    "text": "Creating a Complete Reproducible Environment\nDocument your R environment:\ntouch scripts/setup_environment.R\nAdd environment setup code:\n# Setup Environment for Urban Heat Island Analysis\n# GG3209 - Spatial Data Science\n\n# Install required packages\nrequired_packages &lt;- c(\n  \"sf\",           # Spatial data handling\n  \"terra\",        # Raster data processing\n  \"ggplot2\",      # Plotting\n  \"dplyr\",        # Data manipulation\n  \"leaflet\",      # Interactive maps\n  \"RColorBrewer\", # Color palettes\n  \"rmarkdown\"     # Report generation\n)\n\n# Install missing packages\nnew_packages &lt;- required_packages[!(required_packages %in% installed.packages()[,\"Package\"])]\nif(length(new_packages)) install.packages(new_packages)\n\n# Load all packages\nlapply(required_packages, library, character.only = TRUE)\n\n# Print session info for reproducibility\nsessionInfo()",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#creating-analysis-workflows",
    "href": "git_guide.html#creating-analysis-workflows",
    "title": "Step 2. Introduction to Git",
    "section": "Creating Analysis Workflows",
    "text": "Creating Analysis Workflows\nDocument your complete workflow:\ntouch scripts/main_analysis.R\nAdd workflow documentation:\n# Main Analysis Workflow\n# Run this script to reproduce the complete analysis\n\n# Step 1: Setup environment\nsource(\"scripts/setup_environment.R\")\n\n# Step 2: Data preprocessing\nsource(\"scripts/data_preprocessing.R\")\n\n# Step 3: Temperature analysis\nsource(\"scripts/temperature_analysis.R\")\n\n# Step 4: Create visualizations\nsource(\"scripts/create_maps.R\")\n\n# Step 5: Generate report\n# rmarkdown::render(\"docs/final_report.Rmd\")\n\ncat(\"Analysis complete! Check the outputs/ folder for results.\\n\")\n\n\n## Version Control for Reproducibility\n\n``` bash\n# Commit your reproducible workflow\ngit add scripts/setup_environment.R\ngit add scripts/main_analysis.R\ngit commit -m \"Add reproducible analysis workflow\n\n- Created environment setup script\n- Added main analysis workflow\n- Documented all required packages\n- Added session info for reproducibility\"\n\ngit push origin main",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#issue-1-permission-denied-when-pushing",
    "href": "git_guide.html#issue-1-permission-denied-when-pushing",
    "title": "Step 2. Introduction to Git",
    "section": "Issue 1: ‚ÄúPermission denied‚Äù when pushing",
    "text": "Issue 1: ‚ÄúPermission denied‚Äù when pushing\nSolution: Check your GitHub authentication\n# For HTTPS (recommended)\ngit remote set-url origin https://github.com/username/repository.git\n\n# Enter your GitHub username and personal access token when prompted",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#issue-2-your-branch-is-behind-message",
    "href": "git_guide.html#issue-2-your-branch-is-behind-message",
    "title": "Step 2. Introduction to Git",
    "section": "Issue 2: ‚ÄúYour branch is behind‚Äù message",
    "text": "Issue 2: ‚ÄúYour branch is behind‚Äù message\nSolution: Pull the latest changes first\ngit pull origin main\n# Then push your changes\ngit push origin main",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#issue-3-accidentally-committed-large-files",
    "href": "git_guide.html#issue-3-accidentally-committed-large-files",
    "title": "Step 2. Introduction to Git",
    "section": "Issue 3: Accidentally committed large files",
    "text": "Issue 3: Accidentally committed large files\nSolution: Remove from tracking\n# Remove file from git but keep local copy\ngit rm --cached large_file.tif\n\n# Add to .gitignore\necho \"large_file.tif\" &gt;&gt; .gitignore\n\n# Commit the changes\ngit add .gitignore\ngit commit -m \"Remove large file from tracking\"",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#issue-4-want-to-undo-the-last-commit",
    "href": "git_guide.html#issue-4-want-to-undo-the-last-commit",
    "title": "Step 2. Introduction to Git",
    "section": "Issue 4: Want to undo the last commit",
    "text": "Issue 4: Want to undo the last commit\nSolution: Use reset\n# Keep changes but undo commit\ngit reset --soft HEAD~1\n\n# Discard changes and undo commit (be careful!)\ngit reset --hard HEAD~1",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#official-documentation",
    "href": "git_guide.html#official-documentation",
    "title": "Step 2. Introduction to Git",
    "section": "Official Documentation",
    "text": "Official Documentation\n\nGit Documentation\nGitHub Guides",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#spatial-data-science-with-git",
    "href": "git_guide.html#spatial-data-science-with-git",
    "title": "Step 2. Introduction to Git",
    "section": "Spatial Data Science with Git",
    "text": "Spatial Data Science with Git\n\nHappy Git and GitHub for the useR\nVersion Control for Scientific Research",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#academic-resources",
    "href": "git_guide.html#academic-resources",
    "title": "Step 2. Introduction to Git",
    "section": "Academic Resources",
    "text": "Academic Resources\n\nSoftware Carpentry Git Lesson\nPro Git Book (free online)\n\n\nThis guide was created for the GG3209 Spatial Analysis with GIS students at SGSD University of St Andrews. For questions or suggestions, please create an issue in this book repository. 2025",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "git_guide.html#footnotes",
    "href": "git_guide.html#footnotes",
    "title": "Step 2. Introduction to Git",
    "section": "",
    "text": "https://www.geeksforgeeks.org/what-is-github-and-how-to-use-it/‚Ü©Ô∏é\nhttps://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F‚Ü©Ô∏é",
    "crumbs": [
      "Home",
      "Step 2. Introduction to Git"
    ]
  },
  {
    "objectID": "Lab_1.html",
    "href": "Lab_1.html",
    "title": "Lab No 1: Intro to Python",
    "section": "",
    "text": "Overview\nWelcome to the second part of the module of GG3209 Spatial Analysis with GIS. This part will take advantage of the initial part, which provided you with a solid understanding of spatial data formats (vector-raster) and use them to perform multiple types of analysis like the so-called Multi-Criteria Evaluation (MCE) using the widely popular Open-Source GIS tool, QGIS.\nNow, in this part, you will be guided to handle and use another powerful tool in the geospatial field, Python. It is a free and open-sourced scripting language that was commonly used to automate tasks in the GIS world. Nowadays, it is one of the most popular programming languages[1], especially in GIScience. It is widely used in the private and public sectors and academia for cutting-edge research, where scripts are created and shared using this language to share new methods, knowledge, data, and analysis through multiple scientific fields.\nIn fact, most companies or institutes where you might want to apply will be happily interested in your development skills using Python and will validate your current contribution or work in platforms like GitHub, where you can share and disseminate your coding project. Think about its impact as we cluster R for spatial statistical analysis, and Python is mainly used for escalable and robust spatial analysis. Every day, more packages[2] and code repositories are shared and maintained for easy use and installation, allowing developers or analysts from all backgrounds and expertise to use and integrate them into their own code.\nThis part of the module and this lab workbook are meant to be an introduction to Python. As with any new language, you need to learn the basic rules (grammar) to write your own script, and then, with practice and more practice, you will soon become a Python developer.\n[1] https://www.stackscale.com/blog/most-popular-programming-languages/\n[2] https://pypi.org/\nEstimated time of completion: 45 Minutes",
    "crumbs": [
      "Home",
      "Lab No 1: Intro to Python"
    ]
  },
  {
    "objectID": "Lab_1.html#overview",
    "href": "Lab_1.html#overview",
    "title": "Lab No 1: Intro to Python",
    "section": "",
    "text": "Do not be afraid of failure or errors, even during the installation process; it has happened to all of us, regardless of the level of expertise or number of projects created. In programming, failure is part of the process; what is essential is to find the foundation of any issue and understand how code, logic, and syntax work in harmony to get the results you are expecting.",
    "crumbs": [
      "Home",
      "Lab No 1: Intro to Python"
    ]
  },
  {
    "objectID": "Lab_1.html#learning-outcomes",
    "href": "Lab_1.html#learning-outcomes",
    "title": "Lab No 1: Intro to Python",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\n\nRun Python scripts using ArcGIS Pro and ArcGIS Online\nConducted xgeoprocessing tasks (e.g., buffering, proximity analysis)\nCreated and saved notebooks and web maps\nPracticed using both ArcPy and ArcGIS Python API\n\n\n¬© SGSD | University of St Andrews | GG3209 Spatial Analysis - Introduction to Python",
    "crumbs": [
      "Home",
      "Lab No 1: Intro to Python"
    ]
  },
  {
    "objectID": "Lab_1/Lab_1.html",
    "href": "Lab_1/Lab_1.html",
    "title": "Lab No 1: Introduction to Python using ArcGIS Online",
    "section": "",
    "text": "Setting up the ArcGIS Pro Project\nPerhaps one of the fastest and easiest way to start with python as spatial data scientists for you is to create a notebook in ArcGIS Pro and use it to run some Python code. In here you don‚Äôt need to install any python environment as everything comes as part of the installation of ArcGIS Pro. We will work this way, so you are familiar with python and then we will move to more advance instructions later.",
    "crumbs": [
      "Home",
      "Lab No 1: Introduction to Python using ArcGIS Online"
    ]
  },
  {
    "objectID": "Lab_1/Lab_1.html#manage-code-in-cells",
    "href": "Lab_1/Lab_1.html#manage-code-in-cells",
    "title": "Lab No 1: Introduction to Python using ArcGIS Online",
    "section": "Manage code in cells",
    "text": "Manage code in cells\nThe code in Notebooks is run in cells. The order in which cells are run is indicated by the numbers beside the cells after they are executed. Notebooks have tools to manage cells. Now you‚Äôll explore these aspects of working with Python in a notebook.\n\nWorking with Lists\n\nIn the next empty cell (add a new one if you need to), type the following line of code and run the cell.\nmylist = [1, 2, 3, 4, 5]\n\nWhat happened?\nThis code defined a new variable and set its value, but did not print anything.\n\nThe variable mylist is a list, as indicated by the square brackets. Lists are an important data type in Python that consist of a sequence of elements. In this case, those elements are numbers, but lists can also contain other types of data. Elements in a list are separated by commas.\n\nIn the next empty cell, type the following code and run the cell.\nmylist[-1]\n\nWhat happened?\n\nElements in a list are indexed, starting with index number zero. You can retrieve specific elements in a list by using their corresponding index numbers. Index number -1 means the first element starting from the end of the list‚Äîin other words, the last element. This returns the number 5.\nAs you have seen, the cell input and output prompts show a number after the cell has been run. This number starts at 1 and increases for additional cells. The number increases every time you run a cell, including when you rerun a previously executed cell. The numbers help you keep track of the order in which the cells were run.\n\n\n\n\nUnderstanding Cell Execution Order\n\nChange the code in the cell defining the mylist variable to the following by adding more elements, but don‚Äôt run the cell.\nmylist = [1, 2, 3, 4, 5, 6, 7, 8]\n\nClick the cell below this one, with the code mylist[-1] and click the Run button.\n\nDoes what happened match what you expected?\n\nThe result is the number 5. Why isn‚Äôt it the number 8?\nCode in a notebook is entered cell by cell and any previously used variables are stored in memory.\nUntil you run the cell with the code that redefines the mylist variable, the value of mylist is still the value stored in memory, [1, 2, 3, 4, 5], and the value at position -1 in that list is still 5.\n\nClick the cell with mylist = [1, 2, 3, 4, 5, 6, 7, 8] and run it.\nClick the cell with mylist[-1] and run it.\n\nNow the value in the last position of the list is 8.\n\nAn alternative to running individual cells is to select multiple cells and run them together, or to run all the cells in a notebook by clicking the Cell menu and clicking Run All.\nIt is a good practice to organise lines of code that belong together in the same cell. For example, it would make sense to combine the two previous cells into a single cell. You can manually copy and paste code from one cell to another, but you can also combine cells.\n\n\n\n\nMerging Cells\n\nClick the cell that defines the mylist variable.\n\nThat cell has mylist = [1, 2, 3, 4, 5, 6, 7, 8] in it.\n\nClick the Edit menu and click Merge Cell Below.\n\n\nThe result is a single cell with the combined lines of code. The results below the cells have been removed. An empty line is added between the lines of code from the two merged cells, but you can edit the cell to remove it if you want.\n\nRun the merged cell.\n\n\nThe Edit menu provides many other useful ways to manipulate the cells in your notebook. You can copy and paste cells, delete them, split and merge them, and move a selected cell up or down relative to the other cells.\nAdditional tools are available under the View, Insert, and Cell menu options.\nSome of the most widely used tools are also available as buttons on the notebook toolbar.\nThese include the following:\n\n\nInsert cell below\nCut selected cells\nCopy selected cells\nPaste cells below\nMove selected cells up\nMove selected cells down\n\n\nMore tools can be found on the Command Palette.\n\n\n\n\nUsing the Command Palette\n\nClick the Command Palette button.\n\n\nA list of commands appears.\nYou can run a command by clicking it. The command is applied to the selected cells in the notebook, or to all cells, depending on the command.\n\nIn the Command Palette, click clear all cells output.\n\n\nAll code remains the same, but all outputs have been removed. The input and output prompts are blank, since none of the cells have been run. When you run a cell, the prompts start again at 1.\nThe Command Palette also show shortcuts for many of the tasks.\n\n\n\n\nKeyboard Shortcuts\n\nClick the Command Palette button and scroll down to insert cell below.\n\n\nThe keyboard shortcut for this command is listed to the right of it. The shortcut is the letter B when the notebook cell is in command mode.\n\nHide the Command Palette by clicking outside of the palette but inside the notebook.\nClick the space to the left of the second cell, so it turns blue.\n\n\nBe sure not to click inside the code section, which will turn the cell green.\nThe cell border is blue to indicate that it is in command mode.\n\nPress the B key on your keyboard.\n\n\nA new cell is inserted below the selected cell. If the cell had been green, you would add the letter b to the code in the cell.\nThese shortcuts are not case sensitive, so b and B are the same.\nThere is no need to memorise these commands, but experienced coders memorise and use some of them to speed up their work. For most basic tasks, the buttons and menu options in the notebook work well.\nIf you are looking for the command for a specific task, you can search for it by using the search bar at the top of the Command Palette.\n\nOpen the Command Palette and type run in the Search box.\n\n\nThis filters the list to the tools with run in their name. Some commands have a shortcut. For example, the shortcut for run selected cells is Ctrl +Enter.\n\nHide the Command Palette by clicking outside of the palette but inside the notebook.\nClose the notebook.\n\n\nYou‚Äôve seen how to enter and edit Python code in notebook cells, and how to interact with the notebook to run and manage the code. Next, you‚Äôll use a notebook to run geoprocessing tools in ArcGIS Pro.",
    "crumbs": [
      "Home",
      "Lab No 1: Introduction to Python using ArcGIS Online"
    ]
  },
  {
    "objectID": "Lab_1/Lab_1.html#run-geoprocessing-tools-in-a-notebook",
    "href": "Lab_1/Lab_1.html#run-geoprocessing-tools-in-a-notebook",
    "title": "Lab No 1: Introduction to Python using ArcGIS Online",
    "section": "Run geoprocessing tools in a notebook",
    "text": "Run geoprocessing tools in a notebook\nNow that you‚Äôve had some practice entering code in a notebook, it is time to use some geoprocessing tools. You will start with a new notebook.\n\nCreating a New Notebook for Geoprocessing\n\nClick the Analysis tab, and in the Geoprocessing group, click Python.\n\n\nThe new notebook opens.\n\nIn the Catalog panel, expand the Notebooks section.\nRight-click the new notebook, New Notebook (1).ipynb, and click Rename.\n\nType geoprocessing_demo and press Enter.\n\nThe new notebook is renamed. In the Catalogue pane, you can see that the .ipynb file extension was automatically added to the name. The notebook tab now says geoprocessing_demo.\nFor the next steps, it is useful to see the map and the notebook side by side.\n\nDrag the geoprocessing_demo notebook tab to the docking target that appears below.\n\n\nThe notebook is docked below the map. Now you‚Äôll be able to see the results of your code as you use Python in the notebook to work with feature classes on the map.\n\n\n\n\nImporting ArcPy and Running Geoprocessing Tools\n\nIn the empty cell, type the following line of code and run the cell:\nimport arcpy\n\nThis line of code imports the ArcPy package. ArcPy is a Python package that makes much of the functionality of ArcGIS Pro available from within Python, including geoprocessing.\nSince you are using this notebook in ArcGIS Pro, code that uses geoprocessing tools will not produce an error if you have not imported ArcPy. However, it is good practice to always include import arcpy at the top of your geoprocessing code so it will also work when run outside of ArcGIS Pro.\n\nIn the same cell, add a new line and type the following code:\narcpy.GetCount_management(\"EDI_gis_osm_natural\")\n\nThis code uses ArcPy to run the Get Count tool to determine the number of features in the EDI_gis_osm_natural feature class.\n\nRun the cell.\n\n\nGetCount is a function of ArcPy that runs the Get Count geoprocessing tool located in the Data Management Tools toolbox.\nThe result appears below the code cell. There are 86771 rows (features) in the feature class. These results are very similar to the messages you see after running a tool using the tool dialogue box in ArcGIS Pro. Notebooks are integrated in the geoprocessing framework of ArcGIS Pro. This means that running a tool in a notebook is like running a tool using the tool dialogue box. Any tool that you run in a notebook also appears in the History panel.\n\nClick the Analysis tab and click History.\n\nThe tool appears in the geoprocessing history.\n\n\nClose the History panel\n\n\n\nUnderstanding File Paths and Workspace\n\nEdit the arcpy.GetCount code line to the following:\narcpy.GetCount_management(\"EDI_gis_osm_building\")\nRun the cell. Are you getting any errors?\n\nIn case this code fails with an error message. At the end of the message, the following information appears:\nExecuteError: Failed to execute. Parameters are not valid.\nERROR 000732: Input Rows: Dataset EDI_gis_osm_building does not exist or is not supported\nFailed to execute (GetCount)\nWhy do you think the code failed, when the code to get the count of natural features worked?\nThe EDI_gis_osm_natural feature class is a layer on the active map. In a notebook, you can refer to a dataset by the name of the layer in the active map, like you can when you run a geoprocessing tool interactively using its graphical user interface.\nThe EDI_gis_osm_building feature class is not present as a layer in the active map, and it is also not a feature class in the default geodatabase for the project. You can refer to a feature class that is not in the active map or the default geodatabase by specifying its full path.\nNext, you‚Äôll look up the path to the EDI_gis_osm_buildings (this layer does exist) feature class. The path where the data is located is a key aspect in Python, so now let‚Äôs explore how you can know where the data is stored and then use the correct path in your scripts.\n\nIn the Catalog pane, expand the Databases section and expand PY4SA.gdb.\nRight-click EDI_gis_osm_buildings and click Properties.\n\nClick the column next to Database and select the full path to the geodatabase.\n\nRight-click the selected path and click Copy, and then close the Properties dialog box.\n\nThe path in this example is as follows:\nC:\\Users\\benit\\Documents\\ArcGIS\\Projects\\PY4SA\\PY4SA.gdb\nThe path on your computer will be different, depending on where and how you unzipped the .zip file with the data. You may not have put the data in a folder on your drive C, or inside a folder named Lessons, for example. You should use the path on your computer in the next step.\n\nClick in the notebook cell and update the path that you copied. But make sure you add a backslash \\ between the path you copy and the name of the feature class.\narcpy.GetCount_management(\"C:\\Users\\benit\\Documents\\ArcGIS\\Projects\\PY4SA\\PY4SA.gdb\\EDI_gis_osm_buildings\")\nClick immediately after the open parenthesis and before the first quotation mark, and type the letter r.\narcpy.GetCount_management(r\"C:\\Users\\benit\\Documents\\ArcGIS\\Projects\\PY4SA\\PY4SA.gdb\\EDI_gis_osm_buildings\")\n\nYou need to add the letter r to tell Python that this path is a raw string. Windows computers use the backslash character as a path separator. In Python, the backslash character is an escape character that, when next to some other characters in a string, encodes tab, new line, or other special characters. This means that where \\N occurs beside \\NotebookStart in the path, Python reads the string as having a new line character. Placing the r before the string tells Python to ignore the escape characters.\n\nRun the cell.\n\nThe Get Count tool runs and returns a message that there are 158029 features in the feature class.\n\nYou can also use a forward slash (/) character as a path separator in Python code, or you can double the backslash characters.\nThe following are all valid ways of writing this path in Python:\nr\"C:\\Lessons\\NotebookStart\\Toronto.gdb\\ambulances\"\n\"C:/Lessons/NotebookStart/Toronto.gdb/ambulances\"\n\"C:\\\\Lessons\\\\NotebookStart\\\\Toronto.gdb\\\\ambulances\"\nIf you use a forward slash (/) or double backslash (\\) as your path separator, you do not add the r before the path string.\nFor someone who is used to Windows paths delimited by backslashes, this can look a little strange at first, but it is important to remember.\nOne way to avoid having to specify full paths for tools is to set the workspace.\n\n\n\n\nSetting the Workspace\n\nEdit the code to add a new line between the two lines beginning with import arcpy and arcpy.GetCount. Add the following line:\narcpy.env.workspace = \n\nThis line is setting a property of the environment class, arcpy.env, to be equal to some value. Next, you‚Äôll cut the path to PY4SA.gdb and paste it after this code to set the path.\n\nAdd the path to the PY4SA geodatabase. For example:\narcpy.env.workspace = r\"C:\\Lessons\\NotebookStart\\PY4SA.gdb\"\nRun the cell.\nTo validate the workspace has been properly defined add a new cell and run the following line:\narcpy.env.workspace\n\nYou should get the path you defined as your workspace in this python environment.",
    "crumbs": [
      "Home",
      "Lab No 1: Introduction to Python using ArcGIS Online"
    ]
  },
  {
    "objectID": "Lab_1/Lab_1.html#run-an-analysis-using-a-notebook",
    "href": "Lab_1/Lab_1.html#run-an-analysis-using-a-notebook",
    "title": "Lab No 1: Introduction to Python using ArcGIS Online",
    "section": "Run an analysis using a notebook",
    "text": "Run an analysis using a notebook\nNext, you will do some GIS analysis work using the notebook. Suppose you are interested in finding out what areas within the Edinburgh_Wards are farthest from clinics in Edinburgh. You can use geoprocessing tools in a notebook to identify these areas.\n\nUsing Tab Completion and Tool Signatures\n\nAdd a new cell below the current one.\nPlace the cursor inside the cell and start typing the following:\narcpy.\nPress the Tab key.\n\n\nA list of all of the available ArcPy options appears.\nYou can scroll down and click an item to select it from this list, or you can continue typing.\n\nType an uppercase B.\n\nClick Buffer_Analysis.\n\nThe cell now says arcpy.Buffer_analysis.\nThis process of beginning to type some code and then pressing the Tab key to see and choose from matching options is called tab completion, and it can help you find and more quickly access the commands you need.\n\nWith your cursor still at the end of the line of code, press Shift+Tab.\n\n\nA window with the syntax hints for the Buffer_analysis tool appears. You can click the arrow button to expand it to read the whole topic.\n\nClick the close button to close the Signature window.\nType an open parenthesis.\n\n\nA close parenthesis is also added, and the cursor is placed between them. This is where you can add parameters for the Buffer_analysis tool.\n\nType a quotation mark.\n\n\nA second quotation mark is added. Python needs strings to be enclosed in quotation marks, so it adds a matching quotation mark, with the cursor between them.\nThe three parameters that the Buffer_analysis tool requires are the input feature class, the output feature class, and the buffer distance. There are other optional parameters, but these are the only ones that are required.\nYou‚Äôll buffer the¬†EDI_gis_osm_clinics feature class, name the output feature class¬†clinic_buffer, and make the tool buffer the fire stations by a distance of 1000 meters.\n\nComplete the line of code as follows:\n\narcpy.Buffer_analysis(\"EDI_gis_osm_clinics\",\"clinic_buffer \",\"1000 METERS\")\nThe three parameters of the tool are strings. The tool is able to locate the¬†EDI_gis_osm_clinics feature class using only its name because it is a layer on the map. The tool is able to write an output feature class using only the name¬†‚Äúclinic_buffer‚Äù¬†because the workspace is set. The tool has logic built in to detect the buffer distance value and the units of measure in the string¬†‚Äú1000 METERS‚Äù.\n\nRun the tool.\n\nThe output features are added to the map.\nThe results show which areas fall within 1000 meters, or 1 kilometre, of a clinic and which areas do not. Having both the notebook and the map open at the same time makes it easy to see the results of different choices.\nYou probably need to hide the EDI_gis_osm_natural layer and add the EDI_gis_osm_clinics to the map, so you can see the buffer areas created around each clinic in Edinburgh.\nNow, change the buffer distance to 1750 meters and run the cell again.\narcpy.Buffer_analysis(\"EDI_gis_osm_clinics\",\"clinic_buffer\",\"1750 METERS\")\n\n\n\nNote: If you get an error message, ‚ÄúExecuteError: Failed to execute. Parameters are not valid‚Äù, that mentions that clinic_buffer already exists, then your ArcGIS Pro environment settings, geoprocessing options are not set to allow existing feature classes to be overwritten. To fix this issue, insert a new line in the cell before the arcpy.Buffer_analysis line. On the new line, add the following code:\narcpy.env.overwriteOutput = True\nThis will allow the Buffer tool to overwrite the previous output. The cell should now contain:\narcpy.env.overwriteOutput = True\narcpy.Buffer_analysis(\"EDI_gis_osm_clinics\",\"clinic_buffer\",\"1750 METERS\")\nRun the cell.\n\nThe areas outside of these buffers are further away from the clinics, which may increase the time it takes for an ambulance to respond to a call. To find the areas that are affected, rather than the parts that are not, you will use the erase tool to remove the areas within the buffers from the Edinburgh Wards feature class.",
    "crumbs": [
      "Home",
      "Lab No 1: Introduction to Python using ArcGIS Online"
    ]
  },
  {
    "objectID": "Lab_1/Lab_1.html#using-the-pairwise-erase-tool",
    "href": "Lab_1/Lab_1.html#using-the-pairwise-erase-tool",
    "title": "Lab No 1: Introduction to Python using ArcGIS Online",
    "section": "Using the Pairwise Erase Tool",
    "text": "Using the Pairwise Erase Tool\n\nAdd another cell and enter the following code:\narcpy.PairwiseErase_analysis(\"Edinburgh_Wards\", \"clinic_buffer\", \"no_service\")\nThis calls the PairwiseErase_analysis tool on the Edinburgh_Wards feature class, erasing the areas within the clinic_buffer feature class from it, and writing the results to a new feature class named ‚Äúno_service‚Äù.\nRun the cell.\nIn the Contents pane, uncheck the all layers, except clinics and no_service.\nRight-click the no_service layer and click Zoom To Layer.\n\nThe no_service layer shows places that are farther from clinics in Edinburgh.",
    "crumbs": [
      "Home",
      "Lab No 1: Introduction to Python using ArcGIS Online"
    ]
  },
  {
    "objectID": "Lab_1/Lab_1.html#merging-cells-for-workflow-efficiency",
    "href": "Lab_1/Lab_1.html#merging-cells-for-workflow-efficiency",
    "title": "Lab No 1: Introduction to Python using ArcGIS Online",
    "section": "Merging Cells for Workflow Efficiency",
    "text": "Merging Cells for Workflow Efficiency\n\nClick the arcpy.PairwiseErase_analysis cell, and in the Notebook pane, click the Edit menu and click Merge Cell Above.\n\nThe cells are merged.\n\nA benefit of Notebooks, and Python code in general, is that you can quickly run a sequence of tools. In this case, the sequence only consists of two tools, but it illustrates the concept.\nChange the distance value from 1750 to 2500 and run the cell.\n\nTurn off the new clinic_buffer layer to see the new no_service layer.\nYou may need to zoom to the layer to see the remaining smaller areas.\n\nThe resulting areas are potentially the most compromised in terms of clinic service. You were able to obtain this updated result by running the multiple lines of code as a single cell in the notebook. If you had used the tools from their graphical user interfaces, you would have needed to run both the Buffer tool and the Pairwise Erase tool again to obtain the updated result.\nThe time savings with only two tools is minor, but many workflows consist of more extended sequences of tools. Additionally, the ability to run a tool or multiple tools within a loop makes Python useful when you need to run the same process on various inputs.\n\nSave your ArcGIS Pro project and close.",
    "crumbs": [
      "Home",
      "Lab No 1: Introduction to Python using ArcGIS Online"
    ]
  },
  {
    "objectID": "Lab_1/Lab_1.html#create-and-save-a-notebook-in-arcgis-online",
    "href": "Lab_1/Lab_1.html#create-and-save-a-notebook-in-arcgis-online",
    "title": "Lab No 1: Introduction to Python using ArcGIS Online",
    "section": "Create and save a Notebook in ArcGIS Online",
    "text": "Create and save a Notebook in ArcGIS Online\n\nGo to our ArcGIS Online Organisational account https://uostandrews.maps.arcgis.com/&gt; and log in using your St Andrews email.\nClick Notebook to open a new ArcGIS Notebook.\nClick the New Notebook button and you will see a drop-down list with three options: Standard, Advanced, and Advanced with GPU support.\nClick Standard.\nIt is a best practice to name and save the notebook when you create it.\nClick the Save button in the upper right of the notebook and then click Save As.\n\n\nWhen prompted, give the notebook a title, such as My First Notebook followed by an underscore and your first and last initials; some tags, and a summary. Then click Save Notebook. This information will show up on the item page for your notebook in ArcGIS Online.\nWhen you are working in notebooks in ArcGIS Online it is a good idea to save your work regularly.",
    "crumbs": [
      "Home",
      "Lab No 1: Introduction to Python using ArcGIS Online"
    ]
  },
  {
    "objectID": "Lab_1/Lab_1.html#work-with-a-notebook",
    "href": "Lab_1/Lab_1.html#work-with-a-notebook",
    "title": "Lab No 1: Introduction to Python using ArcGIS Online",
    "section": "Work with a notebook",
    "text": "Work with a notebook\nEach new notebook starts with several markdown cells already populated and one code cell that calls the ArcGIS API for Python and connects you to ArcGIS Online. After that, you can add code and markdown cells to create your workflow.\n1. Double-click the Welcome to your notebook cell to make it editable.\n\nThis is a markdown cell. Markdown is a lightweight, plain text formatting syntax that is widely used across the internet. After double-clicking the cell, the text appears in **blue** with two number signs (**##**) in front of it.\nMarkdown tag welcoming you to your new notebook.\n2. While in the markdown cell, click Run.\nThis runs the cell and turn it into a header. You can also run cells by pressing Shift+Enter on your keyboard. Shift+Enter is the keyboard shortcut for running cells in a notebook.\n\n3. Click Open the command palette at the top of the notebook. This lists of all keyboard shortcuts.\n\n4. Double-click the Welcome to your notebook cell. Insert two more number (**##**) signs in the cell before Welcome to your notebook. There are now four number signs. The additional number signs change the size of the header. Run the cell. The header becomes smaller.\n5. Double-click the Welcome to your notebook cell again. Remove the two number signs from the header and press Enter. On the second line, type This is my first notebook and other other text that you may want to add. Then, click Run.\nThe header returns to its initial size and there is now text below that cell.\nIn any new notebook, the second cell will say Run this cell to connect to your GIS and get started. This is also a markdown cell. This cell directs you to run the code cell that follows it that connects you to ArcGIS Online.\n\nRun this cell at the beginning of every notebook that connects a user to ArcGIS Online.\n6. Double-click in the code cell and run it.\nWhile the cell runs, an asterisk is inside the brackets in the input area so it appears as In [*]. After the cell finishes running, the number 1 replaces the asterisk in the brackets so it appears as In [1]. The number in the brackets increases by one each time a code cell is run. You must run this cell. If you do not run this cell, the other code cells will not run.",
    "crumbs": [
      "Home",
      "Lab No 1: Introduction to Python using ArcGIS Online"
    ]
  },
  {
    "objectID": "Lab_1/Lab_1.html#create-a-web-map.",
    "href": "Lab_1/Lab_1.html#create-a-web-map.",
    "title": "Lab No 1: Introduction to Python using ArcGIS Online",
    "section": "Create a web map.",
    "text": "Create a web map.\nNow that you are familiar with markdown and have run the existing code, you‚Äôll write and run some of your own.\n1. On the ribbon click the plus (+) sign.\n\nThis creates a new cell beneath the code cell that you just ran. The new cell will appear below the currently selected cell.\n2. Set that cell to be a markdown cell.\n\n3. In the new markdown cell, type ### My First Map.\n4. In the same cell, on the second line, add some text below the header that describes the code that you will write. When you are done entering text, run the cell.\n5. Next, you will create a map in the notebook. Start by creating a new code cell.\n6. In the new code cell, create a variable named my_first_map that represents the map and use the ArcGIS API for Python to set the variable to a web map that is centered over a specific location.\n7. Set the variable equal to a web map centered on St Andrews, UK:\nmy_first_map = gis.map(\"St Andrews, UK\")\n8. Run the cell.\nNow that you have named your variable, you will call it to create the map. Do this by creating a new code cell and then within that code cell, typing my_first_map and running that cell.\n\nAfter that cell runs, your first map will appear in your notebook. You can change the location of the center of the map by going back to the previous cell, changing ‚ÄúSt Andrews, UK‚Äù to a different location, and running the cell again, or you can pan and zoom around the current map.",
    "crumbs": [
      "Home",
      "Lab No 1: Introduction to Python using ArcGIS Online"
    ]
  },
  {
    "objectID": "Lab_1/Lab_1.html#explore-content",
    "href": "Lab_1/Lab_1.html#explore-content",
    "title": "Lab No 1: Introduction to Python using ArcGIS Online",
    "section": "Explore Content",
    "text": "Explore Content\nIn ArcGIS Notebooks, you can search for content and view item metadata. Next, you will search for a layer over Los Angeles and add it to the notebook.\n1. On the ribbon click the plus (+) sign. To add a new cell underneath the my_first_map cell\n\n2. Click the Add button.\n\nThe Add button opens the Add Content panel, which allows you to add an ArcGIS Online item as code directly to the notebook. If you have saved content in ArcGIS Online or ArcGIS Notebooks, that content is available from the Add Content panel to use in your notebook.\n\n3. Click ArcGIS Online and type UK to search for all content related to the UK and available in ArcGIS Online. Add the UK SSP: Life Expectancy Layer to the notebook by clicking the add button (a plus sign).\n\nA new code cell containing a code snippet, is added to the notebook beneath your map. This cell calls the layer as the variable item and loads its metadata. The code cell looks like the following:\n\n4. Run this code cell. The item metadata is added as an object to the notebook below the cell, but it is not yet added to the map.\nNext, you will learn some short cuts to write code and display relevant documentation.\n5. Create a code cell below the item and call your map variable. Type my_ and press Tab.\nPressing Tab while typing a variable name activates the notebook‚Äôs autocomplete functionality. The line completes and displays my_first_map.\n6. After my_first_map, type .ad so it appears as my_first_map.ad and press Tab.\nThe code is completed to be my_first_map.add_layer\n7. Press Shift+Tab.\nPressing Shift+Tab opens the docstring. The docstring is a small piece of documentation for developers that describes what the method does.\nAfter investigating the docstring, close it.\nYou can access the function‚Äôs help documentation by typing a question mark at the end of the function. For example, my_first_map.add_layer? will open the add_layer help documentation from the bottom of the notebook. Try this.\nAfter reading the help documentation, close it.\n8. In the same cell where you investigated the function signature of my_first_map, call the add_layer method and use it to add the Life expectancy item to the map. Run the cell. The cell code should appear as my_first_map.add_layer(item).\n\n9. After the cell completes, scroll to the map in your notebook and verify that the new item with the new layer from Met Office has been added.\nYou have created your first map and added a layer to it using ArcGIS Notebooks. The map includes zoom buttons, a compass, and the option to change from a map view to a globe view.\nPan and zoom the map and use these buttons.\nThis is a live web map with the same functionality as the maps you use in ArcGIS Online.\nWith a few lines of code, you can save the map you created to ArcGIS Online. Web maps are defined by specific properties, such as the title, description (snippet), and tags. You can define the properties by creating a dictionary that contains them in Python code. Then, you can save the map as a web map.\n10. In a new code cell, define the web map properties using the following dictionary. You can modify or change the title, snippet, or tags. Run the cell.\nwebmap_properties = {'title':'My First Map', 'snippet': 'My first map from my first notebook', 'tags':['ArcGIS Notebooks', 'UK']}\n11. Create another cell where you will save the webmap. Add the following line: my_first_map.save(webmap_properties). Run the cell.\nRunning this cell creates an active link that will take you to the webmap item in ArcGIS Online. Click the active link and verify that the webmap was created in ArcGIS Online.\n\n12. Click the Save button in the upper right of the notebook.\nIt is a good idea to save your work regularly when you work in notebooks hosted online. If there is no Python activity in the notebook for 20 minutes, the Python kernel will shut down, the notebook will stop working, and all variables in memory will be lost. Once you have restarted the kernel you will need to run all of the cells again, starting from the beginning, to restore the values.\n13. Go to your Content, and check that now you have two new items in your portal. The notebook, that you can open and edit it with new code. And the new WebMap that you created using Python and the ArcGIS API for Python.\n\n\n14. Click My First Map to open the details, and then click Open in Map Viewer. Then ArcGIS Online will launch a viewer to let you explore, edit and share the WebMap you have created.",
    "crumbs": [
      "Home",
      "Lab No 1: Introduction to Python using ArcGIS Online"
    ]
  },
  {
    "objectID": "Lab_1/Lab_1.html#challenge-for-next-class",
    "href": "Lab_1/Lab_1.html#challenge-for-next-class",
    "title": "Lab No 1: Introduction to Python using ArcGIS Online",
    "section": "Challenge for next class",
    "text": "Challenge for next class\nNow that you have learned how to create a map, search for content, add layers, and save a webmap, use Python and ArcGIS Notebooks to create another web map that contains multiple layers that you are interested in. Save the webmap to ArcGIS Online.\nBe ready to showcase this webmap during the next class showing what the map is about and the difficulties you had",
    "crumbs": [
      "Home",
      "Lab No 1: Introduction to Python using ArcGIS Online"
    ]
  },
  {
    "objectID": "Lab_2.html",
    "href": "Lab_2.html",
    "title": "Lab No 2: Python Basics - Part 1",
    "section": "",
    "text": "Introduction\nNow you have acquired some basic skills of creating new notebooks, run your python environment, the next step and certainty the long process is to learn the python basics of this programming language. This will give you an idea of the ‚Äògrammar‚Äô that python includes.\nPlease go to each cell and address the challenges/questions when is required.",
    "crumbs": [
      "Home",
      "Lab No 2: Python Basics - Part 1"
    ]
  },
  {
    "objectID": "Lab_2.html#content",
    "href": "Lab_2.html#content",
    "title": "Lab No 2: Python Basics - Part 1",
    "section": "Content:",
    "text": "Content:\n\nHow to deal with variables.\nExplain the difference between Python data types.\nPerform mathematical and logical operations.\nWork with lists, tuples, sets, and dictionaries.\nApply appropriate methods to different data types.\n\nIf you need more information or examples, here it is a great resource w3school.com.",
    "crumbs": [
      "Home",
      "Lab No 2: Python Basics - Part 1"
    ]
  },
  {
    "objectID": "Lab_2.html#variables",
    "href": "Lab_2.html#variables",
    "title": "Lab No 2: Python Basics - Part 1",
    "section": "Variables",
    "text": "Variables\nYou can think of a Variable as anything that related to information or data. A Variable can be a file path on your local machine, could be also a path to a shapefile, could be just a number or letter. Once you create a variable you are assigning a certain space of memory on your computer to storage that information. So you could use it or call it to reference the associated data or object for use in processes and analyses. Note that there are some rules for variable names:\nThere are certain considerations:\n\ncannot start with a number or special character (or, can only start with a letter or an underscore) (for example, x1 is valid while 1x is not.).\ncan only contain letters, numbers, or underscores. No other special characters are allowed (for example, x, x1, _x, and x1_ are all valid. x$ is not valid.).\nare case-sensitive (for example, x1 and X1 are two separate variables).\n\nSince Python is an object-based language, you will primarily interact with your data using variables. The print() function is used to print the data referenced by the variable.\nx = 1\ny = \"Python\"\nx1 = 2\ny1 = \"Spatial Data\"\n_x = 3\n_y = \"Web GIS\"\nprint(x)\nprint(y)\nprint(x1)\nprint(y1)\nprint(_x)\nprint(_y)\nYou can also assign data to multiple variables as a single line of code as demonstrated below. In Python variable names are dynamic, so you can overwrite them. This can, however, be problematic if you overwrite a variable name accidentally. So, use unique names if you do not want to overwrite prior variable.\nx, x1, _x = 1, 2, 3\nprint(x)\nprint(x1)\nprint(_x)\nAssignment Operators are used to assign values or data to variables. The most commonly used operator is =. However, there are some other options that allow variables to be manipulated mathematically with the resulting value saved back to the original data object that the variable references. These additional assignment operators can be useful, but you will use the = operator most of the time.\nFor example, += will add a value to the current value and assign the result back to the original variable. In the first example below, x references the value 2. The += assignment operator is then used to add 3 to x and save the result back to x. Work through the provided examples and make sure you understand the use of each operator.\nx = 2\nprint(x)\nx += 3\nprint(x)\n\nx = 2\nprint(x)\nx -= 3\nprint(x)\n\nx = 2\nprint(x)\nx *= 3\nprint(x)\n\nx = 2\nprint(x)\nx /= 3\nprint(x)\n\nx = 2\nprint(x)\nx **= 3\nprint(x)\n\nImportant Note:\nIn the cell bellow, you will run small experiment that explains some important behavior of Python. You have defined a variable a that holds a list of three values. We will discuss lists later in this section. Now, you create a new variable b and assign it to be equal to a. Layer you edit the variable a by appending a new value to the list (You will see how this is done later, so don‚Äôt worry if you don‚Äôt understand how this works yet). When you print a and b, you can see that both variables contain the same set of numbers in the list even though you added 8 to a after setting b equal to a. Or, the change that you made to a was also applied to b.\nIn Python, certain types of objects, such as lists, are mutable. This means that it is possible to change the data stored in memory and referenced to the variable. When a mutable object is altered, all variables that point to it will reflect this change. What this means practically is that setting b equal to a results in a and b pointing to the same object or data in memory. So, changes to a or b will be reflected in both variables since the data being referenced by both have been updated.\nIf you have experience in R, and I guess you do, you will see how Python is different, as in R, setting a variable equal to another variable would make a copy that was not linked and could be altered without changing the original variable.\nTo test whether two variables reference the same object in memory, you can use the is keyword. if True is returned, then they reference the same object. You can also print the object ID, which represents the memory address for the object, using the id() function. Using both methods below, you can see that a and b reference the same object.\na = [5, 6, 7]\nb = a\na.append(8)\nprint(a)\nprint(b)\n\nprint(a is b)\nprint(id(a))\nprint(id(b))\nWhat if you wanted to make a copy of a variable referencing mutable data that does not reference the same object?\nFor example, you may want to be able to make changes to a that do not impact b. This can be accomplished using the copy() or deepcopy() functions from the copy module.\nCheck how now we import a new package, module or library to get new functionalities.\nIn the experiment below, You have defined b as a deep copy of a. Now, changes made to a do not impact b. This is because they do not reference the same object in memory since deepcopy() makes a copy of the object or data to a new location in memory. This is confirmed using is and id().\nimport copy\na = [5, 6, 7]\nb = copy.deepcopy(a)\na.append(8)\nprint(a)\nprint(b)\n\nprint(a is b)\nprint(id(a))\nprint(id(b))",
    "crumbs": [
      "Home",
      "Lab No 2: Python Basics - Part 1"
    ]
  },
  {
    "objectID": "Lab_2.html#comments-important-for-clear-and-scalable-coding",
    "href": "Lab_2.html#comments-important-for-clear-and-scalable-coding",
    "title": "Lab No 2: Python Basics - Part 1",
    "section": "Comments (Important for clear and scalable coding)",
    "text": "Comments (Important for clear and scalable coding)\nNow please pay attention as this is the key of many developers and analysts, you need to learn how to commenting your code. Comments are used to make your code more readable and are not interpreted by the computer. Instead, they are skipped and meant for humans. Different languages use different syntax to denote comments. Python uses the hashtag or pound sign. You can add comments as new lines or following code on the same line.\nUnfortunately, Python does not have specific syntax for multi-line comments. However, this can be accomplished by adding hashtags before each separate line or using a multi-line string that is not assigned to a variable. Examples are shown below.\nIt is generally a good idea to comment your code for later use and for use by others. In fact you need to comment your code for all assignments and exercises you run in this part of the course.\n#Single-line comment\nx = 1\ny = 2 #Another single-line comment\n#A\n#multi-line\n#comment\nz = 3\n\"\"\"\nAnother multi-line comment\n\"\"\"\nw = 4",
    "crumbs": [
      "Home",
      "Lab No 2: Python Basics - Part 1"
    ]
  },
  {
    "objectID": "Lab_2.html#data-types",
    "href": "Lab_2.html#data-types",
    "title": "Lab No 2: Python Basics - Part 1",
    "section": "Data Types",
    "text": "Data Types\nA variety of data types are available in Python to store and work with a variety of input. Below are explanations of the data types which you will use most often. There are additional types that we will not discuss.\nWhen creating a variable, it is not generally necessary to explicitly define the data type. However, this can be accomplished using constructor functions if so desired. Constructor functions can also be used to change the data type of a variable, a process known as casting.\nAvailable constructor methods include str(), int(), float(), complex(), list(), tuple(), dict(), set(), and bool().\nTo determine the data type, you can use the type() function. See the examples below where I convert an integer to a float and then a float to a string.\n\nNumeric\n\nInt = whole numbers\nFloat = numbers with decimal values\nComplex = can include imaginary numbers\n\nText\n\nString = characters or numbers treated as characters\n\nBoolean\n\nBoolean = logical True or False\n\nSequence\n\nList = list of features that can be re-ordered, allows for duplicates, and is indexed\nTuple = list of features that cannot be re-ordered, allows for duplicates, and is indexed\n\nMapping\n\nDictionary = list of features that can be re-ordered, does not allow duplicates, is indexed, and contains key and value pairs\n\nSet\n\nSet = list of features that are unordered, not indexed, and does not allow for duplicates\n\n\n#Create a variable and check the data type\nx = 1\nprint(type(x))\n#Change the data type\nx = float(x)\nprint(type(x))\nx= str(x)\nprint(type(x))\n\nNumbers\nRegardless of the the type (integer, float, or complex), numbers are defined without using quotes. If a number is placed in quotes it will be treated as a string as demonstrated below. This is important, since the behavior of the data is altered. In the example, x represents 1 as a number while y represents ‚Äú1‚Äù as a string (note the quotes). Adding x to itself will yield 2 (1 + 1). Adding y to itself will yield ‚Äú11‚Äù, or the two strings are combined or concatenated.\n#Create variables\nx = 1\ny = \"1\"\nprint(x + x)\nprint(y + y)\nNumbers support mathematical operations, as demonstrated below. If you are not familiar with these concepts, modulus will return the remainder after division while floor division will round down to the nearest whole number after division.\nIf a whole number has no decimal values included or no period (1 vs.¬†1. or 1.0), this implies that the output is in the integer data type as opposed to float type.\nx = 4\ny = 3\nprint(x + y) #Addition\nprint(x - y) #Subtraction\nprint(x * y) #Multiplication\nprint(x / y) #Division\nprint(x % y) #Modulus\nprint(x ** y) #Exponentiation\nprint(x // y) #Floor Division\n\n\nStrings\nStrings are defined using single or double quotes. If quotes are included as part of the text or string, then you can use the other type to define the data as text. Again, numbers placed in quotes will be treated as strings.\nx = \"Python\"\ny = \"is great\" #Must use double quotes since a single quote is use in the string\nz = \"2\" #Number treated as a string\nprint (x,y,z)\nPortions of a string can be sliced out using indexes.\nVery important note: In Python the indexing starts at 0 as opposed to 1., like in R So, the first character is at index 0 as opposed to index 1. Negative indexes can be used to index relative to the end of the string. In this case, the last character has an index of -1.\nIndexes combined with square brackets can be used to slice strings. Note that the last index specified in the selection or range will not be included and that spaces are counted in the indexing.\nx = \"GG3209 Spatial Analysis with GIS\"\nprint(x[0:6])\nprint(x[7:14])\nprint(x[15:23])\nprint(x[-3:])\nStrings can be combined or concatenated using the addition sign. If you want to include a number in the string output, you can cast it to a string using str(). In the example below, note the use of blank spaces so that the strings are not ran together.\nThe len() function can be used to return the length of the string, which will count blank spaces along with characters.\nx = \"Spatial\"\nxx=\"GG\"\ny = 3209\nz = \"Analysis\"\nw = \"With Python\"\nstrng1 = xx + str(y) + \" \"+ x + \" \" + z + \" \" + w\nprint(strng1)\nprint(len(strng1))\n\n\nMethod\nA method is a function that belongs to or is associated with an object. Or, it allows you to work with or manipulate the object and its associated properties in some way. Data types have default methods that can be applied to them.\nMethods applicable to strings are demonstrated below. Specifically, methods are being used to change the case and split the string at each space to save each component to a list.\nx = \"GG3209 Spatial Analysis with GIS\"\nprint(x.upper())\nprint(x.lower())\nlst1 = x.split(\" \")\nprint(lst1)\nWhen generating strings, issues arise when you use characters that have special uses or meaning in Python. These issues can be alleviated by including an escape character or backslash as demonstrated below.\ns1 = \"Issue with \\\"quotes\\\" in the string.\"\ns2 = \"C:\\\\data\\\\project_1\" #Issue with file paths. \ns3 = \"Add a new line \\nto text string\"\nprint(s1)\nprint(s2)\nprint(s3)\n\n\nBooleans\nBooleans can only be True or False and are often returned when an expression is logically evaluated.\nA variety of comparison operators are available. Note the use of double equals; a single equals cannot be used since it is already used for variable assignment, or is an assignment operator, and would thus be ambiguous.\n\nComparison Operators\n\nEqual: ==\nNot Equal: !=\nGreater Than: &gt;\nGreater Than or Equal To: &gt;=\nLess Than: &lt;\nLess Than or Equal To: &lt;=\n\n\nLogical statements or multiple expressions can be combined using Logical Operators.\n\nLogical Operators:\n\nA AND B: and\nA OR B: or\nA NOT B: not\n\n\nx = 3\ny = 7\nz = 2\nprint(x == 7)\nprint(x &gt; y)\nprint(x &lt; y)\n\nprint(x &lt; y and x &gt; z)\nprint(x &lt; y and x &lt; z)\nprint(x &lt; y or x &lt; z)\nYou can also assign Booleans to a variable. Note that you do not use quotes, as that would cause the text to be treated as a string instead of a Boolean.\nx = \"True\"\ny = True\nprint(type(x))\nprint(type(y))\n\n\nLists\nNow one of the very relevant type of objects in Python. Lists allow you to store multiple numbers, strings, or Booleans in a single variable. Square brackets are used to denote lists.\nItems in a list are ordered, indexed, and allow for duplicate members. Indexing starts at 0. If counting from the end, you start at -1 and subtract as you move left. A colon can be used to denote a range of indexes, and an empty argument before the colon indicates to select all elements up to the element following the colon while an empty argument after the colon indicates to select the element at the index specified before the colon and all features up to the end of the list. The element at the last index is not included in the selection.\nPython lists can contain elements of different data types.\nlst1 = [6, 7, 8, 9, 11, 2, 0]\nlst2 = [\"A\", \"B\", \"C\", \"D\", \"E\"]\nlst3 = [True, False, True, True, True, False]\nprint(lst1[0])\nprint(lst1[0:3])\nprint(lst2[-4:-1])\nprint(lst2[:3])\nprint(lst2[3:])\nlst4 = [1, 2, \"A\", \"B\", True]\nprint(type(lst4[0]))\nprint(type(lst4[2]))\nprint(type(lst4[4]))\nWhen the len() function is applied to a list, it will return the number of items or elements in the list as opposed to the number of characters. When applied to a string item in a list, this function will return the length of the string.\nlst1 = [\"A\", \"B\", \"C\", \"D\", \"E\"]\nprint(len(lst1))\nprint(len(lst1[0]))\nThe code below shows some example methods for strings.\nlst1 = [\"A\", \"B\", \"C\", \"D\", \"E\"]\nlst1.append(\"F\") #Add item to list\nprint(lst1)\nlst1.remove(\"F\") #Remove item from a list\nprint(lst1) \nlst1.insert(2, \"ADD\") #Add item to list at defined position \nprint(lst1)\nlst1.pop(2) #Remove item at specified index or the last item if no index is provided\nprint(lst1)\nAs explained above, in order to copy a list and not just reference the original data object, you must use the copy() or deepcopy() method. Simply setting a new variable equal to the original list will cause it to reference the original data object, so changes made to the old list will update to the new list. This is demonstrated in the example below.\nlst1 = [\"A\", \"B\", \"C\", \"D\", \"E\"]\nlst2 = lst1\nlst3 = lst1.copy()\nprint(lst2)\nprint(lst3)\nlst1.append(\"F\")\nprint(lst2)\nprint(lst3)\nLists can be concatenated together, or a list can be appended to another list, using the methods demonstrated below.\nlst1 = [\"A\", \"B\", \"C\"]\nlst2 = [\"D\", \"E\", \"F\"]\nlst3 = lst1 + lst2\nprint(lst1)\nprint(lst2)\nprint(lst3)\nlst1.extend(lst2)\nprint(lst1)\nLastly, lists can contain other lists, tuples, or dictionaries, which will be discussed below. In the example, lst2 contains four elements, the last of which is a list with three elements.\nlst1 = [\"A\", \"B\", \"C\"]\nlst2 = [\"D\", \"E\", \"F\", lst1]\nprint(lst2)\n\n\nTuples\nTuples are similar to lists in that they are ordered and allow duplicate elements. However, they cannot be altered by adding items, removing items, or changing the order of items. To differentiate them from lists, parenthesis are used as opposed to square brackets. Think of tuples as lists that are protected from alteration, so you could use them when you want to make sure you don‚Äôt accidentally make changes.\nIf you need to change a tuple, it can be converted to a list, manipulated, then converted back to a tuple.\nt1 = (1, 3, 4, 7)\nprint(type(t1))\n\n\nDictionaries (not the one for spelling)\nDictionaries are unordered, changeable, indexed, and do not allow for duplicate elements. In contrast to lists, tuples, each value is also assigned a key.\nAnd here is the key ‚Äì&gt; Values can be selected using the associated key.\nYou can also use the key to define a value to change.\nSimilar to lists, you must use the copy() or deepcopy() method to obtain a copy of the dictionary that will not reference the original data or memory object.\ncls = {\"code\": \"GG3209\", \"Name\":\"Spatial Analysis with Python\" }\nprint(cls)\nprint(cls[\"Name\"])\ncls[\"Code\"] = 461\nprint(cls)\nMultiple dictionaries can be combined into a nested dictionary, as demonstrated below.\nThe keys can then be used to extract a sub-dictionary or an individual element from a sub-dictionary.\ncls1 = {\"prefix\" : \"GG\", \"Number\" : 3209, \"Name\": \"Spatial Analysis with Python\"}\ncls2 = {\"prefix\" : \"GG\", \"Number\" : 3210, \"Name\": \"Advanced Analysis with Python\"}\ncls3 = {\"prefix\" : \"GG\", \"Number\" : 3211, \"Name\": \"Introduction to Remote Sensing\"}\ncls4 = {\"prefix\" : \"GG\", \"Number\" : 3212, \"Name\": \"Web GIS\"}\nclsT = {\n    \"class1\" : cls1,\n    \"class2\" : cls2,\n    \"class3\" : cls3,\n    \"class4\" : cls4\n}\nprint(clsT)\nprint(clsT[\"class1\"])\nprint(clsT[\"class1\"][\"Name\"])",
    "crumbs": [
      "Home",
      "Lab No 2: Python Basics - Part 1"
    ]
  },
  {
    "objectID": "Lab_2.html#additional-types",
    "href": "Lab_2.html#additional-types",
    "title": "Lab No 2: Python Basics - Part 1",
    "section": "Additional Types",
    "text": "Additional Types\n\nArrays\nArrays are similar to lists; however, they must be declared.\nThey are sometimes used in place of lists as they can be very compact and easy to apply mathematical operations. However in this course, we will primarily work with NumPy arrays, which will be discussed in more detail in a later module.\nIf you wanna know how an array looks like, here is an example\nmy_array = [1, 2, 3, 4, 5]\nprint(my_array[0])   # Output: 1\nprint(my_array[2])   # Output: 3\nYou can also modify elements in the array by assigning a new value to a specific index:\nmy_array[1] = 7\nprint(my_array)      # Output: [1, 7, 3, 4, 5]\n\n\nClasses\nNow some a more complex type of object in Python: Classes are used to define specific types of objects in Python and are often described as templates.\nOnce a class is defined, it can be copied and manipulated to create a subclass, which will inherit properties and methods from the parent class but can be altered for specific uses. You get more details in the next Notebook (Part 2). You will also see example uses of classes in futher examples.\nOne use of classes is to define specialized data models and their associated methods and properties. For example, classes have been defined to work with geospatial data types.\nclass Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\n    \n    def bark(self):\n        print(\"Woof!\")\n\nmy_dog = Dog(\"Buddy\", \"Golden Retriever\")\nprint(my_dog.name)    # Output: Buddy\nprint(my_dog.breed)   # Output: Golden Retriever\nmy_dog.bark()         # Output: Woof!\nIn the example above, we‚Äôve defined a class called Dog that has a constructor method ‚Äúinit that takes two parameters, name and breed.\nInside the constructor, we assign the passed-in values to instance (re-create the object) variables with the same names using the self keyword.\nWe‚Äôve also defined a method called bark that simply prints out ‚ÄúWoof!‚Äù when called. To call this method on an instance of the Dog class, we first create an instance of the class by calling the constructor and passing in the required parameters, and then we call the bark method on that instance.\n\n\nFinal remarks\nBefore moving on, I wanted to note which data types are mutable and which are immutable.\nAgain, data or objects that are mutable can be altered after they are defined (such as adding a new element to a list).\nMutable types include lists, sets, and dictionaries.\nImmutable types include booleans, integers, float, complex, strings, and tuples.\n\n\nNext Step\nOnce you finish this, now clone Python_Basics_Part2, In that notebook, we will discuss more components of Python including functions, control flow, loops, modules, and reading data from disk.",
    "crumbs": [
      "Home",
      "Lab No 2: Python Basics - Part 1"
    ]
  },
  {
    "objectID": "Lab_2.html#references",
    "href": "Lab_2.html#references",
    "title": "Lab No 2: Python Basics - Part 1",
    "section": "References",
    "text": "References\n\nPythonGIS\nPython Data Spatial",
    "crumbs": [
      "Home",
      "Lab No 2: Python Basics - Part 1"
    ]
  },
  {
    "objectID": "Lab_3.html",
    "href": "Lab_3.html",
    "title": "Lab No 3: Python Basics - Part 2",
    "section": "",
    "text": "Introduction\nWe will now discuss additional components of the Python language including functions, flow control, loops, modules, and reading/writing data from disk. It is important you learn effective ways to make your code efficient, as python can be memory-consuming, but at the same time learn how to create Loops, and flow control will help to run tasks in an automatic ways making your scripts a powerful tool.\nIf you have some experience with this type of conditions or components from your previous courses with R, you will see that the logic is the same. Reading and writing files using python is also a key skill to learn, as in most of the cases you will need to access files, or folders where your spatial data is located.\nPlease go through every cell, reading carefully all descriptions and run the code cell to see the examples, you later might want to use this notebook to recall how to create the following components:",
    "crumbs": [
      "Home",
      "Lab No 3: Python Basics - Part 2"
    ]
  },
  {
    "objectID": "Lab_3.html#introduction",
    "href": "Lab_3.html#introduction",
    "title": "Lab No 3: Python Basics - Part 2",
    "section": "",
    "text": "Content\n\nDefine and use functions.\nUse If‚Ä¶Else statements, While Loops, and For Loops.\nDescribe and interpret classes and methods.\nAccess and use modules and libraries.\nWork with local files and directories.\nUse f-strings and list comprehension.\n\nIf you need more information or examples Here it is a great resource w3school.com.",
    "crumbs": [
      "Home",
      "Lab No 3: Python Basics - Part 2"
    ]
  },
  {
    "objectID": "Lab_3.html#functions",
    "href": "Lab_3.html#functions",
    "title": "Lab No 3: Python Basics - Part 2",
    "section": "2. Functions",
    "text": "2. Functions\nFunctions are probably one of the key components in any programming language, Functions do something when called. You can think of those as tools. Methods, which we will discuss in more detail later in this notebook, are like functions except that they are tied to a specific object.\nWhen creating a new class, you can define methods specific to the new class. Functions generally have the following generic syntax:\noutput = function(Parameter1, Parameter2). #Think of parameters as Inputs., so you have output = function(Input1, Input2)\nIn contrast, methods will have the following generic syntax:\noutput = object.method(Parameter1, Parameter2).  \nBelow, You are generating a simple function that multiplies two numbers together.\nThe def keyword is used when defining a function. Within the parenthesis, a list of parameters, which are often specific inputs or required settings, can be provided.\nIn the below example, the function accepts two parameters: *a* and *b*. On the next line, indented, and after the colon, what the function does is defined. In this case, the function simply returns the product of the two values. The **return** keyword is used to define the output of the function (or what is returned), in this case the product of the two provided values.\nOnce a function is created, it can be used. In Example 1, You will see two arguments, or values assigned to the parameters, and save the result to a variable x.\nThen when using a function, it is also possible to provide the arguments as key and value pairs, as in Example 2.\nWhen creating a function, default arguments can be provided for parameters when the function is defined. If arguments are not provided when the function is used, then the default values will be used, as demonstrated in Example 3.\n\n2.1 Indentation\nThis is a good time to stop and describe indentation.\nPython makes use of whitespace, indentations, or tabs to denote or interpret units of code. This is uncommon, as most other languages use brackets or punctuation of some kind. So, it is important to properly use indentations or your code will fail to execute correctly or at all.\n#Example 1\ndef multab(a,b):\n    return a*b\n\nx = multab(3,6)\nprint(x)\n\n#Example 2\nx = multab(a=5, b=3)\nprint(x)\n\n#Example 3\ndef multab(a=1,b=1):\n    return a*b\nx = multab()\nprint(x)\n\n\nChallenge 2.1\n\nIn the next code cell, create a function that transform the distance in miles to kilometers between London and Edinburgh. Try no to google or use ChatGPT for this challenge, as those will provide more advance suggestion, you will only need the previous cell description to run this challenge.\n\n\n\n2.2 Options *args and **kwargs for functions\nThere are a few other options when defining functions that increase flexibility. For example, what if you wanted to edit the function created above so that it can accept more than two arguments and so that the number of arguments can vary? This can be accomplished using either *args or **kwargs.\n*args:\nA single asterisk (*) is used to unpack an iterable, such as a list, whereas two asterisks (**) are used to unpack a dictionary. Using *args allows you to to provide a variable number of non-keyword arguments (or, each argument does not need to be assigned a key). In contrast, **kwargs is used to provide a variable number of keyword arguments (or, each argument must have a key).\nIn the first example below, You altered the function from above to accept two or more arguments.\nWithin the function, later you define a variable x1 that initially assigned a value of 1. Then, inside of a for loop, which will be discussed later, you iteratively multiply x1 by the next provided value. To test the function, a feed it the values 1 through 5 as non-keyword arguments.\nThe result is calculated as 1x1 ‚Äì&gt; 1x2 ‚Äì&gt; 2x3 ‚Äì&gt; 6x4 ‚Äì&gt; 24x5 ‚Äì&gt; 120.\nNote that the single asterisk is key here. The work ‚Äúargs‚Äù could be replaced with another term, as the second part of the example demonstrates. What is important is that * is used to unpack an iterable.\n# Example 1\n\ndef multab(*args):\n    x1 = 1\n    for a in args:\n        x1 *= a\n    return x1\n\nx = multab(1, 2, 3, 4, 5)\nprint(x) \n\n#Example 2\n\ndef multab(*nums):\n    x1 = 1\n    for a in nums:\n        x1 *= a\n    return x1\n\nx = multab(1, 2, 3, 4, 5)\nprint(x) \n**kwargs:\nThe next example demonstrates the use of **kwargs. Here, the arguments must have keys. Again, what is important here is the use of ** to unpack a dictionary: ‚Äúkwargs‚Äù can be replaced with another term. Note the use of the .values() method for a dictionary. This allows access to the values as opposed to the associated keys.\ndef multab(**kwargs):\n    x1 = 1\n    for a in kwargs.values():\n        x1 *= a\n    return x1\n\nx = multab(a=1, b=2, c=3, d=4, e=5)\nprint(x)\n\ndef multab(**nums):\n    x1 = 1\n    for a in nums.values():\n        x1 *= a\n    return x1\n\nx = multab(a=1, b=2, c=3, d=4, e=5)\nprint(x)\nThe next cell demonstrates the use of the single asterisk to unpack an iterable, in this case a list. Each element in the list is returned separately as opposed to as a single list object. This is the same functionality implemented by *args.\nx = [2,3,4,5]\nprint(*x)\nLastly, it is possible to use both *args and **kwargs in the same function.#\nHowever, *args must be provided before **kwargs. In the example below, the parameter a is provided an argument of 1 while the parameter b is provided an argument of 2. 3 would be associated with *args, since it is not assigned a key, while 4 and 5 would be associated with **kwargs since they are assigned a key.\n# Create a function\ndef multab(a=2, b=2, *args, **kwargs):\n    x1 = 1 #Define variables\n    x1 *= a\n    x1 *= b\n    if args: # Conditional\n        for arg in args: #Loop\n            x1 *= arg\n    if kwargs:\n        for kwarg in kwargs.values():\n            x1 *= kwarg\n    return x1\n\nx = multab(1, 2, 3, c=3, d=4)\nprint(x)\n# Read description below to understand how this function works, looks more complicated than actually it is.\nAs the examples above demonstrate, *args and **kwargs increase the flexibility of functions in Python by allowing for variable numbers of arguments. Even if you do not make use of these options, they are important to understand, as many functions that you encounter will make use of them. So, knowledge of this functionality will aid you in understanding how to implement specific functions and interpret the associated documentation.\n\nNOTE:\nThe following options will you give an additional level of skill in Python. Although they are rarely included in python basics, we consider that if you can master those, you will have an extra level of expertise and will definitely help you to make more efficient programs using python.\n\n\n\n2.3 Lambda\nA lambda function is a special function case that is generally used for simple functions that can be anonymous or not named. They can accepted multiple arguments but can only include one expression. Lambda functions are commonly used inside of other functions.\nlam1 = lambda a, b, c: str(a) + \" \" + str(b) + \" \" + str(c)\nprint(lam1(\"Geospatial\", \"Data\", \"Science\"))\n\na = \"Geospatial\"\nb = \"Dasta\"\nc = \"Science\"\n\n\n2. Scope\nVariables are said to have global scope if they can be accessed anywhere in the code.\nIn contrast, local scope implies that variables are only accessible in portions of the code.\nFor example, by default new variables defined within a function cannot be called or used outside of the function. If you need to specify a variable within a function as having global scope, the global keyword can be used.\nIn the first example below, the variables xG, yG, and z have global scope, so can be called and used outside of the function. In contrast, variables xL and yL have local scope and are not available outside of the function. If you attempt to run the last line of code, which is commented out, you will get an error.\nxG = 2\nyG = 3\ndef Func1(a, b):\n    xL = a*a\n    yL = b*b\n    return xL + yL\n\nz = Func1(xG, yG)\nprint(xG)\nprint(z)\n#print(xL+3) will not work due to local scope\nIf you need a variable declared inside of a function to have global scope, you can use the global keyword as demonstrated below.\nxG = 2\nyG = 3\ndef Func1(a, b):\n    global xL \n    xL = a*a\n    global yL \n    yL = b*b\n    return xL + yL\n\nz = Func1(xG, yG)\nprint(xG)\nprint(z)\nprint(xL+3)\n\n\n3. Pass\nIt is not possible to leave a function empty when it is defined. As you develop code, you can make use of the pass keyword as a placeholder before adding content to a function. This will allow you to work with your code without errors until you complete the content within the function. pass can also be used within incomplete class definitions and loops.\ndef multab(x, y):\n    pass",
    "crumbs": [
      "Home",
      "Lab No 3: Python Basics - Part 2"
    ]
  },
  {
    "objectID": "Lab_3.html#conditionals---control-flow",
    "href": "Lab_3.html#conditionals---control-flow",
    "title": "Lab No 3: Python Basics - Part 2",
    "section": "Conditionals - Control Flow",
    "text": "Conditionals - Control Flow\n\n1. If‚Ä¶Else\nAll coding languages allow for control flow in which different code is executed depending on a condition.\nIf‚Ä¶Else statements are a key component of how this is implemented. Using logical conditions that evaluate to True or False, it is possible to program different outcomes. Think about this as the rules, if something is True, then do this, but if something is False, then do that.\nThe first example uses only if. So, if the condition evaluates to True, the remaining code will be executed. If it evaluates to False then nothing is executed or returned. In this case, the condition evaluates to True, so the text is printed.\nAgain, remember that indentation is very important in Python. The content of the if statement must be indented or the code will fail.\nx = 7\nif x &gt; 6:\n    print(str(x) + \" is greater than 6.\")\nIt is common to have a default statement that is executed if the condition evaluates to False as opposed to simply doing nothing. This is the use of an else statement. No condition is required for the else statement since it will be executed for any case where the if condition evaluates to False. Again, note the required indentation.\nx = 3\nif x &gt; 6:\n    print(str(x) + \" is greater than 6.\")\nelse:\n    print(str(x) + \" is less than or equal to 6.\")\nWhat if you want to evaluate against more than one condition? This can be accomplished by incorporating one or multiple elif statements. The code associated with the else statement will only be executed if the if and all elif statements evaluate to False.\nAll statements should be mutually exclusive or non-overlapping so that the logic is clear. In the second example, I have changed the first condition to x &gt;= 6, so now the condition in the if and elif statements overlap. When the code is executed, the result from the if statement is returned. Since the first condition evaluated to True, the associated code was executed and the elif and else statements were ignored. If I swap the if and elif conditions, a different result is obtained. So, the order matters. In short, this ambiguity can be avoided by using conditions that are mutually exclusive and non-overlapping.\nx = 6\nif x &gt; 6:\n    print(str(x) + \" is greater than 6.\")\nelif x == 6:\n     print(str(x) + \" is equal to 6.\")\nelse:\n    print(str(x) + \" is less than 6.\")\nx = 6\nif x &gt;= 6:\n    print(str(x) + \" is greater than 6.\")\nelif x == 6:\n     print(str(x) + \" is equal to 6.\")\nelse:\n    print(str(x) + \" is less than 6.\")\n\n\nx = 6\nif x == 6:\n     print(str(x) + \" is equal to 6.\")\nelif x &gt;= 6:\n     print(str(x) + \" is greater than 6.\")\nelse:\n    print(str(x) + \" is less than 6.\")\n\n\n2. While Loop\nWhile loops are used to loop code as long as a condition evaluates to True. In the example below, a variable i is initially set to 14.\nThe loop executes as long as i remains larger than 7. At the end of each loop the -= assignment operator is used to subtract 1 from i. Also, i is simply a variable, so you do not need to use i specifically. For example, i could be replaced with x.\nPlease consider the following, One potential issue with a while loop is the possibility of an infinite loop in which the loop never stops because the condition never evaluates to False. For example, if I change the assignment operator to +=, the condition will continue to evaluate to True indefinitely.\ni = 14\nwhile i &gt; 7:\n    print(i)\n    i -= 1\n\n\n3. For Loop\nFor Loops will execute code for all items in a sequence. For loops make use of data types that are iterable, or that can return each individual element in the data object sequentially (for example, each string element in a list). Data types that are iterable include lists, tuples, strings, dictionaries, and sets.\nIn the first example below, a for loop is being used to print every value in a list. In the next example, each character in a string is printed sequentially. Both lists and strings are iterable, so can be looped over.\nlst1 = [3, 6, 8, 9, 11, 13]\nfor i in lst1:\n    print(\"Value is: \" + str(i))\nstr1 = \"Remote Sensing\"\nfor c in str1:\n    print(c)\nCombining a for loop and If‚Ä¶Else statements allows for different code to be executed for each element in a sequence or iterable, such as a list, based on conditions, as demonstrated in the code below. In later modules, you will see example use cases for working with and analyzing spatial data. Note the levels of indentation used, which, again, are very important and required when coding in Python. The content in the for loop is indented with one tab while the content within the if, elif, and else statements, which are include in the for loop, are indented with two tabs.\nlst1 = [3, 6, 8, 9, 11, 13]\nfor i in lst1:\n    if i &lt; 8:\n        print(str(i) + \" is less than 8.\")\n    elif i == 8:\n        print(str(i) + \" is equal to 8.\")\n    else:\n        print(str(i) + \" is greater than 8.\")\nThe range() function is commonly used in combination with for loops. Specifically, it is used to define an index for each element in an iterable that can then be used within the loop.\nIn the example below, range() is used to define indices for all elements in a list. The len() function returns the length, so the returned indices will be 0 through the length of the list, in this case 4. The for loop will iterate over indices 0 through 3 (the last index is not included). This allows for the index to be used within the loop. In the example, the index is used to extract each element from the list and save it to a new local variable (country), which is then provided to a print statement.\ncountries = [\"Belgium\", \"Mexico\", \"Italy\", \"India\"]\nfor i in range(len(countries)):\n    country = countries[i]\n    print(\"I would like to visit \" + country + \".\")\nAnother function that is commonly used in combination with for loops is enumerate(). For each element in the iterable, enumerate() will return an index and the element. Both can then be used within the loop.\nIn the first example below, enumerate() is used to create an index and extract each element in the list sequentially. In this case, the enumeration is not necessary, since the index is not needed. However, in the next example, the index is used to print different results depending on whether the index is even or odd. So, enumerate() is needed because I need access to both the index and the data element within the loop.\ncountries = [\"Belgium\", \"Mexico\", \"Italy\", \"India\"]\nfor index, country in enumerate(countries):\n    print(\"I would like to visit \" + country + \".\")\ncountries = [\"Belgium\", \"Mexico\", \"Italy\", \"India\"]\nfor index, country in enumerate(countries):\n    if index%2 == 0:\n        print(\"I would like to visit \" + country + \".\")\n    else:\n        print(\"I would not like to visit \" + country + \".\")\nThere are some other useful techniques for flow control, code development, and error handling that we will not discuss in detail here. For example, try, except, and finally can be used to to handle errors and provide error messages. break is used to terminate a for loop based on a condition. continue can be used to skip the remaining steps in an iteration and move on to the next iteration in a loop.",
    "crumbs": [
      "Home",
      "Lab No 3: Python Basics - Part 2"
    ]
  },
  {
    "objectID": "Lab_3.html#list-comprehension---great-feature-from-python",
    "href": "Lab_3.html#list-comprehension---great-feature-from-python",
    "title": "Lab No 3: Python Basics - Part 2",
    "section": "List Comprehension - Great Feature from Python!",
    "text": "List Comprehension - Great Feature from Python!\nList comprehension is a nice feature in Python.\nThis technique allows you to create a new list from elements in an existing list and offers more concise syntax than accomplishing the same task using a for loop.\nIn the first example, You will see that we use a list comprehension to return each element (c) in lst1 to a new lst, lst2, if the string starts with the letter ‚ÄúB‚Äù. Here is how you would read the syntax within the square brackets:\n\n‚ÄúReturn the element (c) from the list (lst1) if its first character is‚ÄùB‚Äù.\n\nIn the second example, no condition is used. Instead, you are concatenating ‚ÄúI would like to visit‚Äù to each country and returning each result as an element in a new list.\nYou will see examples of list comprehension in later modules. It is a very handy technique.\n# Example 1\n\nlst1 = [\"Belgium\", \"Mexico\", \"Italy\", \"India\", \"Bulgaria\", \"Belarus\"]\nlst2 = [c for c in lst1 if c[0] == \"B\"]\nprint(lst2)\n# Example 2\n\nlst1 = [\"Belgium\", \"Mexico\", \"Italy\", \"India\", \"Bulgaria\", \"Belarus\"]\nlst2 = [\"I would like to visit \" + c for c in lst1]\nprint(lst2)",
    "crumbs": [
      "Home",
      "Lab No 3: Python Basics - Part 2"
    ]
  },
  {
    "objectID": "Lab_3.html#classes",
    "href": "Lab_3.html#classes",
    "title": "Lab No 3: Python Basics - Part 2",
    "section": "Classes",
    "text": "Classes\nWe briefly covered classes in the previous notebook. Here, we will provide a more in-depth discussion.\nSince Python is an object-based language, it is important to be able to define different types of objects. Classes serve as blueprints for creating new types of objects. Thus, the concept, use, and application of classes is very important in Python.\nTo create a new class, you must use the class keyword. In the following example, you are generating a new class called Course. To construct a class, you must use the __init__() function. Within this function, you can assign values to object properties, and __init__() will be executed any time a new instance of the class is created. When You create an instance of my Course class, three properties will be initiated: the subject code, course number, and **course name*.\nself references the current instance of the class. Although you can use a term other than self, self is the standard term used. Regardless of the term used, it must be the first parameter in __init__().\nAfter the __init__() function, you then define a method that will be associated with the class. This method, printCourse(), will print the course name. Again, methods are functions that are associated with an object or class.\nIn order to use the method, You must first create an instance of the class and provide arguments for the required parameters. You can then apply the method to the instance to print the course info.\nOnce an instance of a class is created, the arguments assigned to properties can be changed using the following generic syntax: instance.property = new argument. Here you are changing the number parameter of the x instance of the Course class to 350. and then use my printCourse() method again.\nclass Course:\n    def __init__(self, subject, number, name):\n        self.subject = subject\n        self.number = number\n        self.name = name\n    def printCourse(self):\n        print(\"Course is \" + self.subject + \": \" + self.name + \" with the code: \" + str(self.number))\n\nx = Course(\"Spatial Analysys\", 33209, \"Using Python\")\nx.printCourse()\ntype(x)\n\nx.number = 350\nx.printCourse()\nOnce a class is created, subclassess can be derived from it. By default, subclasses will take on the properties and methods of the parent or superclass. However, you can alter or add properties and methods. This allows you to start with a more generic blueprint and refine it for a specific use case, as opposed to building a new class from scratch.\nIn the example below, I have redefined the Course class then subclassed it to create the Undergrad class. I have added a parameter, which requires redefining the __init__() function. The super() function returns all of the parameters and methods of the parent class. The use of super() provides control over what is inherited by the child class from the parent. We will not explore all possible use cases here. I then define a new method called printCourse2().\nOnce an instance of the Undergrad class is created, I can use both methods, since the printCourse() method was inherited from the parent class.\nclass Course:\n    def __init__(self, subject, number, name):\n        self.subject = subject\n        self.number = number\n        self.name = name\n    def printCourse(self):\n        print(\"Course is \" + self.subject + \" \" + self.name + \", Code:  \"+ str(self.number))\n\nclass Undergrad(Course):\n    def __init__(self, subject, number, name, level):\n        super().__init__(subject, number, name)\n        self.level = level\n    def printCourse2(self):\n       print(\"Undergrad Course is \" + self.subject + \" \"  + self.name + \". \" + \"Must be a \" + self.level + \" to take this course.\") \n\nx = Undergrad(\"Spatial Analysys\", 3209, \"With Python\", \"for New students\")\nx.printCourse()\nx.printCourse2()\nYou will not be required to created classes and subclasses in this course. However, it is important to understand this functionality of Python for making use of modules and libraries, as this is used extensively. For example, the PyTorch library, which is used for deep learning, makes extensive use of classes, and using it will require subclassing available classes.",
    "crumbs": [
      "Home",
      "Lab No 3: Python Basics - Part 2"
    ]
  },
  {
    "objectID": "Lab_3.html#math-module",
    "href": "Lab_3.html#math-module",
    "title": "Lab No 3: Python Basics - Part 2",
    "section": "Math Module",
    "text": "Math Module\nThe functionality of Python is expanded using modules. Modules represent sets of code and tools and are combined into libraries. In this class, we will explore several modules or libraries used for data science including NumPy, Pandas, matplotlib, and scikit-learn. We will also explore libraries for geospatial data analysis including GeoPandas and Rasterio.\nAs an introduction to modules and libraries, we will now explore the math module. To use a module, it first needs to be imported. You can then use the methods provided by the module. When using a method from the math module, you must include the module name as demonstrated below.\nimport math\n\nx = 4.318\nprint(math.cos(x))\nprint(math.sin(x))\nprint(math.tan(x))\nprint(math.sqrt(x))\nprint(math.log10(x))\nprint(math.floor(x))\nYou can also provide an alias or shorthand name for the module when importing it by using the as keyword. This can be used to simplify code.\nimport math as m\n\nx = 4.318\nprint(m.cos(x))\nprint(m.sin(x))\nprint(m.tan(x))\nprint(m.sqrt(x))\nprint(m.log10(x))\nprint(m.floor(x))\nIf you want to import each individual function from a module and not need to use the module name or alias name in your code, you can use the import syntax demonstrated below. This is generally best to avoid, especially if the module is large and/or has many functions.\nfrom math import *\n\nx = 4.318\nprint(cos(x))\nprint(sin(x))\nprint(tan(x))\nprint(sqrt(x))\nprint(log10(x))\nprint(floor(x))\nYou can also import individual functions or subsets of functions as opposed to the entire module.\nfrom math import cos, sin\nx = 4.318\nprint(cos(x))\nprint(sin(x))",
    "crumbs": [
      "Home",
      "Lab No 3: Python Basics - Part 2"
    ]
  },
  {
    "objectID": "Lab_3.html#working-with-files",
    "href": "Lab_3.html#working-with-files",
    "title": "Lab No 3: Python Basics - Part 2",
    "section": "Working with Files",
    "text": "Working with Files\n\n1. Read Files\nAs a data scientist or geospatial data scientist, you need to use Python to work with and analyze files on your local machine.\nFirst, a file or folder path can be assigned to a variable. On a Windows machine, you will need to either:\n\nChange the backslashes to forward slashes or\nUse the backslash escape character ahead of any backslash.\n\nThis is tricky depending of the operating system.\ntxt1 = \"D:/data/text_files/t1.txt\" #Must change backslash to forward slash\ntxt1 = \"D:\\\\data\\\\text_files\\\\t1.txt\" #Or, use the backslash escape character\nFor the following instructions you need to upload certain datasets to your Cloud GIS. In case you are working locally, the workflow is similar, you need to provide the appropriate path. For now we will upload the data into you Cloud GIS, so you can read it using the notebook hosted in ArcGIS Online.\nIn this Notebook, click in Files.\n\nDownload the data folder from Moodle, then click in home, then click in Choose file and select cities.txt\n\nOnce you have chosen the file, then name will appear to confirm, now clic Upload.\n\nNow you have the cities.txt in your portal and now you can call the call., if you click in the plus symbol you will get a new cell from ArcGIS Notebook to help you to understand what is the correct way to call this dataset. For future instructions make your you have uploaded the required dataset, from Data folder included in Moodle.\nTo read a text file you can just use the module with, like this:\nwith open('/arcgis/home/cities.txt', \"r\") as f:\n    contents = f.read()\n    print(contents)\nIn the following example, we first import the csv module, which provides functionality for working with CSV files.\nWe then use the with statement to open the file ‚Äúworld_cities.csv‚Äù in read mode (r) and assign the file object to the variable csvfile.\nWe pass this file object to the csv.reader function to create a reader object that can be used to iterate over the rows of the CSV file.\nInside the with block, we loop over each row in the CSV file using a for loop, and print out each row using the print function.\nNote that each row is represented as a list of strings.\nNow, upload the world_cities.csv file, using the same process we described earlier.\nimport csv\n\nwith open('/arcgis/home/world_cities.csv', \"r\") as csvfile:\n    reader = csv.reader(csvfile)\n    for row in reader:\n        print(row)\nSpecific modules or libraries will allow you to read in and work with specific types of data. For example, in the code below you are using Pandas to read in a comma-separated values (CSV) file as a Pandas DataFrame. We will discuss Pandas in a later part of this module.\nIn case you did not notice we use the keyword import to literally import the functionally of an external package that requires previous installation. For now we can import it without any issue. In case you need to import a new module that has not been included in your initial setup, you can still install it first, then make the import.\nimport numpy as np #Import numpy package, but then we said as np just for quick reference later in the code.\nimport pandas as pd #Import pandas package, but then we said as pd just for quick reference later in the code.\n# Sometime get the rigth path is tricky, so before entering to the function, you can add a previous cell and make sure the path is correctly called.\ncities_df = pd.read_csv('/arcgis/home/world_cities.csv', sep=\",\", header=0, encoding=\"ISO-8859-1\")\ncities_df.head(10)\nYou can also use other modules like matplotlib to read and plot external files like an image, like this:\n# importing required libraries\nimport matplotlib.pyplot as plt\nimport matplotlib.image as img\n  \n# reading the image\ntestImage = img.imread('/arcgis/home/sentinel_img.png')\n  \n# displaying the image\nplt.imshow(testImage)\n\n\nWorking with Directories\nInstead of reading in individual files, you may want to access entire lists of files in a directory. The example below demonstrates one method for accomplishing this using the os module and list comprehension. Specifically, it will find all TXT files in a directory and write their names to a list.\nOnly the file name is included in the generated list, so I use additional list comprehension to add the full file path and generate a new list.\nimport os\n\ndirect = '/arcgis/home/text_files'\n\nfiles = os.listdir(direct)\nfiles_txt = [i for i in files if i.endswith('.txt')]\nprint(files_txt)\n\ntxtlst = [direct + s for s in files_txt]\nprint(txtlst)\nThe code below demonstrates three other methods for reading in a list of TXT files from a directory. The first method uses the listdir() method from the os module, the second uses the walk() method form the os module (which allows for recursive searching within subdirectories), and the last method uses the glob module.\nYou will see many other examples in this course of how to read files and lists of file names.\nfrom os import listdir\n \ndef list_files1(directory, extension):\n    return (f for f in listdir(directory) if f.endswith('.' + extension))\n\nfrom os import walk\n\ndef list_files2(directory, extension):\n    for (dirpath, dirnames, filenames) in walk(directory):\n        return (f for f in filenames if f.endswith('.' + extension))\n    \nfrom glob import glob\nfrom os import getcwd, chdir\n \ndef list_files3(directory, extension):\n    saved = getcwd()\n    chdir(directory)\n    it = glob('*.' + extension)\n    chdir(saved)\n    return it\n\ndirect = '/arcgis/home/text_files/'\nmethod1 = list(list_files1(direct, \"txt\"))\nmethod2 = list(list_files2(direct, \"txt\"))\nmethod3 = list_files3(direct, \"txt\")\nprint(method1)\nprint(method2)\nprint(method3)",
    "crumbs": [
      "Home",
      "Lab No 3: Python Basics - Part 2"
    ]
  },
  {
    "objectID": "Lab_3.html#f-strings",
    "href": "Lab_3.html#f-strings",
    "title": "Lab No 3: Python Basics - Part 2",
    "section": "f-Strings",
    "text": "f-Strings\nIn Python, f-strings can be used to format printed strings or include variables within strings. This technique can be useful for generating well-formatted and useful print statements or dynamically using variables in printed strings.\nIn the first example, I am printing x but with formatting defined to round to two decimal places. In the next example, I multiply x by itself in the printed string. Note that f-strings will begin with f followed by the statement in parenthesis. Variables or code will be placed in curly brackets, and formatting can be defined using syntax after a colon. In the first example, ‚Äú:2f‚Äù indicates to round to two decimal places.\nIn the third example, I am calling x in a statement while in the fourth example I am using the .upper() method to convert the string to all uppercase in the printed statement. Lastly, I have edited the enumerate() example above with an f-string to print the country name and assigned index in the for loop.\nThroughout this course, you will see examples of f-strings for providing better formatted and/or more interpretable print output.\nx = 0.123456789\nprint(f'The value is {x:.2f}')\nx = 6\nprint(f'{x} times 2 is equal to {x*x}')\nx = \"blue\"\nprint(f'My favorite color is {x}.')\nx = \"blue\"\nprint(f'My favorite color is {x.upper()}.')\n\ncountries = [\"Belgium\", \"Mexico\", \"Italy\", \"India\"]\nfor index, country in enumerate(countries):\n    print(f'The index for {country} is {index}.')",
    "crumbs": [
      "Home",
      "Lab No 3: Python Basics - Part 2"
    ]
  },
  {
    "objectID": "Lab_3.html#whats-next",
    "href": "Lab_3.html#whats-next",
    "title": "Lab No 3: Python Basics - Part 2",
    "section": "What‚Äôs next",
    "text": "What‚Äôs next\nWith these two notebooks(Part No1, and Part No2) you got a comprehensive list of components that you now can use to write python code. Now it is just a matter of practice and more practice.\nInitially you will think this is extremely complicated or long, but with the exercises you will realised that is actually pretty simple.\nLike I said before, if you have any particular question aks the available TA in the room.\nWell done, now you have covered the basics for python it is time to PRACTICE a bit with less guidance.\nOpen the Exercises_PythonBasics and complete all the challenges there.",
    "crumbs": [
      "Home",
      "Lab No 3: Python Basics - Part 2"
    ]
  },
  {
    "objectID": "assignments/lab_1_installation.html",
    "href": "assignments/lab_1_installation.html",
    "title": "Lab 1: Installation Assignment",
    "section": "",
    "text": "Step 1: Check Your Installation\nThis is your first lab assignment and it correspond to the Lab No 1 in this part of the course. The idea s that we can check that everything is installed correctly and you can create your first Jupyter notebook. There are several key steps so read carefully and follow the instructions.\nThis Lab Assignment will include a GitHub Classroom where you will automatically assigned a repository where you need to upload the outcomes of this assignment. This is an individual assignment and each student will have to generate their repository, and then push the requested files. The assignment will be automatically graded and I will review those grades to provide tufter feedback in Moodle.\nEstimated time: 30-45 minutes",
    "crumbs": [
      "Home",
      "Assignments",
      "Lab 1: Installation Assignment"
    ]
  },
  {
    "objectID": "assignments/lab_1_installation.html#step-1-check-your-installation",
    "href": "assignments/lab_1_installation.html#step-1-check-your-installation",
    "title": "Lab 1: Installation Assignment",
    "section": "",
    "text": "1.1 Open Your Terminal/Command Prompt\n\nWindows: Search for ‚ÄúAnaconda Prompt‚Äù or ‚ÄúCommand Prompt‚Äù\nMac: Open ‚ÄúTerminal‚Äù\nLinux: Open your terminal application\n\n\n\n1.2 Test These Commands\nType all these commands one after another, then take ONE screenshot of all the results:\n# Check that conda is installed\nconda --version\n\n# To see your environments (you should see gg3209 in the list)\nconda env list\n\n# Activate your environment\nconda activate gg3209\n\n# Check Python is working\npython --version\nScreenshot 1: Take a full screen screenshot showing: - Your desktop/taskbar with date and time visible - The terminal window with all command results - Save this as screenshot_1_installation_check.png\n\n\n\n\n\n\nImportant\n\n\n\nMake sure you name this screenshot exactly as is described. There are automatic tests then will use this name.\n\n\nüí° Tip: Make sure your computer‚Äôs date/time is visible in the screenshot (usually in the taskbar/menu bar)",
    "crumbs": [
      "Home",
      "Assignments",
      "Lab 1: Installation Assignment"
    ]
  },
  {
    "objectID": "assignments/lab_1_installation.html#step-2-create-your-first-jupyter-notebook",
    "href": "assignments/lab_1_installation.html#step-2-create-your-first-jupyter-notebook",
    "title": "Lab 1: Installation Assignment",
    "section": "Step 2: Create Your First Jupyter Notebook",
    "text": "Step 2: Create Your First Jupyter Notebook\n\n2.1 Start Jupyter\nIn your terminal (with gg3209 environment activated), type:\njupyter lab\nThis should open a web browser with Jupyter. Take a full screen screenshot showing the Jupyter homepage with your desktop/taskbar (including date/time) visible.\nScreenshot 2: Save this as screenshot_2_jupyter_home.png\n\n\n\n\n\n\nImportant\n\n\n\nMake sure you name this screenshot exactly as is described. There are automatic tests then will use this name.\n\n\n\n\n2.2 Create a New Notebook\n\nClick ‚ÄúNew‚Äù ‚Üí ‚ÄúPython 3‚Äù to create a new notebook\nSave it as my_first_notebook.ipynb (File ‚Üí Save As)\n\n\n\n\n\n\n\nImportant\n\n\n\nMake sure you name this notebook exactly as is described. There are automatic tests then will use this name.\n\n\n\n\n2.3 Add Content to Your Notebook\nCell 1 - Add the first Cell and change it to ‚ÄúMarkdown‚Äù (dropdown menu), then type:\n# My First GG3209 Notebook\n\n**StudentCode:** [Write your Student Code]  \n**Date:** [date when you are working on this]  \n**Course:** GG3209 - Part 2\nCell 2 - Add a new cell (click + button), keep it as ‚ÄúCode‚Äù, and type:\nimport datetime\nimport platform\nimport os\n\nprint(\"=\" * 50)\nprint(\"INSTALLATION VERIFICATION\")\nprint(\"=\" * 50)\nprint(f\"Date and Time: {datetime.datetime.now()}\")\nprint(f\"Student working on: {platform.system()} {platform.release()}\")\nprint(f\"Computer name: {platform.node()}\")\nprint(f\"Python location: {os.path.dirname(os.__file__)}\")\nprint(\"=\" * 50)\n\nprint(\"Hello, Spatial Data Science!\")\nprint(\"Testing my Python installation...\")\n\nimport pandas as pd\nimport numpy as np\n\nprint(f\"‚úÖ Pandas version: {pd.__version__}\")\nprint(f\"‚úÖ NumPy version: {np.__version__}\")\nprint(\"‚úÖ Basic libraries are working!\")\nCell 3 - Add another code cell:\nimport matplotlib.pyplot as plt\n\n# Create a simple plot\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 1, 5, 3]\n\nplt.figure(figsize=(8, 5))\nplt.plot(x, y, 'bo-', linewidth=2, markersize=8)\nplt.title(\"My First Plot!\", fontsize=16)\nplt.xlabel(\"X values\")\nplt.ylabel(\"Y values\")\nplt.grid(True, alpha=0.3)\nplt.show()\n\nprint(\"‚úÖ Plotting is working!\")\nCell 4 - Add another code cell:\ntry:\n    import geopandas as gpd\n    print(f\"‚úÖ GeoPandas version: {gpd.__version__}\")\n    print(\"‚úÖ Spatial data tools are ready!\")\nexcept ImportError:\n    print(\"‚ùå GeoPandas not found - please check your installation\")\n\ntry:\n    import folium\n    print(f\"‚úÖ Folium version: {folium.__version__}\")\n    print(\"‚úÖ Interactive maps are ready!\")\nexcept ImportError:\n    print(\"‚ùå Folium not found - please check your installation\")\n\n\n2.4 Run Your Notebook\n\nClick on each cell and press Shift + Enter to run it\nMake sure all cells run without errors\nTake a full screen screenshot of your completed notebook showing your desktop/taskbar with date and time Screenshot 3: Save this as screenshot_3_notebook_complete.png",
    "crumbs": [
      "Home",
      "Assignments",
      "Lab 1: Installation Assignment"
    ]
  },
  {
    "objectID": "assignments/lab_1_installation.html#step-3-export-as-pdf-important",
    "href": "assignments/lab_1_installation.html#step-3-export-as-pdf-important",
    "title": "Lab 1: Installation Assignment",
    "section": "Step 3: Export as PDF (Important!)",
    "text": "Step 3: Export as PDF (Important!)\nThis is a crucial step - It is important you can export your work as PDF.\n\nWith the Jupyter Lab open and your my_first_notebook.ipynb already complete.\nGo to File ‚Üí Save and Export Notebook As ‚Üí Webpdf\nIf that doesn‚Äôt work, try File ‚Üí Save and Export Notebook As ‚Üí PDF\nSave and Export Notebook As ‚Üí HTML and then using your browser‚Äôs print function to create a PDF file.\n\nüö® Important: You MUST submit a PDF version.\n\nClose Jupyter Lab. In the terminal press Control-C twice to stop it.",
    "crumbs": [
      "Home",
      "Assignments",
      "Lab 1: Installation Assignment"
    ]
  },
  {
    "objectID": "assignments/lab_1_installation.html#step-4-get-your-github-repository",
    "href": "assignments/lab_1_installation.html#step-4-get-your-github-repository",
    "title": "Lab 1: Installation Assignment",
    "section": "Step 4: Get Your GitHub Repository",
    "text": "Step 4: Get Your GitHub Repository\n\n4.1 Accept the Assignment (Using GitHub Classroom)\n\nClick on the assignment link: [Assignment Link]\nThis will automatically create a repository for you named lab-1-installation-student_GH_account\nGitHub will create your personal copy - wait for it to finish setting up\n\n\n\n\n4.2 Clone and Work with Your Repository\n\nClick the green ‚ÄúCode‚Äù button and copy the repository URL.\nIf you have windows machine make sure you copy the HTTPS link,\n\nbut if you have MacOS machine, copy the SSH link.\n\nOpen terminal/command prompt and navigate to where you want to save your work (e.g Documents)\nRun this command including the link you have just copied: git clone [paste-your-repository-url]\nIt ill take some seconds to clone locally the repository. Navigate into your repository using cd and the folder that has been created. (e.g cd lab-1-installation-mfbenitezp )\n\n\n\n4.3 Add Your Files\nCopy all the screenshots you have generated, your jupyter notebook (the file with extension .ipynb) and the PDF file into your repository folder:\n- my_first_notebook.ipynb\n- my_first_notebook.pdf\n- All your screenshots",
    "crumbs": [
      "Home",
      "Assignments",
      "Lab 1: Installation Assignment"
    ]
  },
  {
    "objectID": "assignments/lab_1_installation.html#step-5-submit-your-work",
    "href": "assignments/lab_1_installation.html#step-5-submit-your-work",
    "title": "Lab 1: Installation Assignment",
    "section": "Step 5: Submit Your Work",
    "text": "Step 5: Submit Your Work\n\nWhat to Check Before Submitting\nYour Local repository should have:\n- [ ] my_first_notebook.ipynb your Jupyter notebook\n- [ ] my_first_notebook.pdf a PDF version of your notebook\n- [ ] 3 screenshots showing your work (all full screen with date/time visible)\nIn the same terminal where you have launched Jupyter or in a new terminal (but make sure you are in the folder of the repository you have cloned).\nRun the following commands to submit your work for this part of the Lab No1 and the requirements of this assignment.\n# Add all files\ngit add .\n\n# Commit with a message\ngit commit -m \"Ready to Grade\"\n\n# Push to GitHub\ngit push\nAutomatic Validation: Once you push, GitHub will automatically check:\n\nAll required files are present\nNotebook runs without errors (it will make sure your Notebook execute correctly and in your machine)\nPDF export was successful\nScreenshots show proper installation\n\nYou‚Äôll see a green checkmark ‚úÖ or red X ‚ùå next to your commit showing if validation passed!",
    "crumbs": [
      "Home",
      "Assignments",
      "Lab 1: Installation Assignment"
    ]
  },
  {
    "objectID": "assignments/lab_1_installation.html#getting-help",
    "href": "assignments/lab_1_installation.html#getting-help",
    "title": "Lab 1: Installation Assignment",
    "section": "Getting Help",
    "text": "Getting Help\n\nIf Something Doesn‚Äôt Work:\n\nDon‚Äôt panic! This is normal when learning new tools\nTake a screenshot of any error messages\nAsk for help in the course Teams Channel or make an appointment during my office hours.\nInclude the error screenshot in your repository\n\n\n\nCommon Issues:\n\nConda not found: Make sure you installed Miniconda correctly\nEnvironment not found: Double-check the environment name is gg3209\nPDF export fails: Try the browser print method, or just submit screenshots\nLibraries missing: Make sure you‚Äôre in the right environment (conda activate gg3209)",
    "crumbs": [
      "Home",
      "Assignments",
      "Lab 1: Installation Assignment"
    ]
  },
  {
    "objectID": "assignments/lab_1_installation.html#well-done",
    "href": "assignments/lab_1_installation.html#well-done",
    "title": "Lab 1: Installation Assignment",
    "section": "Well Done",
    "text": "Well Done\nYou‚Äôve completed your first part of the lab 1, now move to the next assignment. For now you can:\n- Use conda environments\n- Create and run Jupyter notebooks\n- Export notebooks as PDF\n- Upload files to GitHub\n\nThis guide was created for the GG3209 Spatial Analysis with GIS students at SGSD University of St Andrews. For questions or suggestions, please create an issue in this book repository. 2025",
    "crumbs": [
      "Home",
      "Assignments",
      "Lab 1: Installation Assignment"
    ]
  },
  {
    "objectID": "DataSources.html",
    "href": "DataSources.html",
    "title": "Data Sources",
    "section": "",
    "text": "1. Scottish Spatial Data Infrastructure (SSDI)\nThis is a list of web portals where you can access open and authoritative geospatial data for the UK and Scotland. These sources can be used to download shapefiles, connect to live web services, and enrich your ArcGIS Online projects with meaningful local datasets.\nThe official portal for discovering and accessing spatial datasets from Scottish public bodies.\nData Available: - Administrative boundaries - Environmental and natural heritage data - Planning and infrastructure - Marine and coastal datasets - Data formats: Shapefiles, GeoJSON, WMS, WFS",
    "crumbs": [
      "Home",
      "Data Sources"
    ]
  },
  {
    "objectID": "DataSources.html#scotlands-environment-web",
    "href": "DataSources.html#scotlands-environment-web",
    "title": "Data Sources",
    "section": "2. Scotland‚Äôs Environment Web",
    "text": "2. Scotland‚Äôs Environment Web\nA partnership platform providing environmental datasets and interactive maps.\nData Available: - Land cover and land use - Air and water quality - Biodiversity and habitats - Climate and emissions - Tools: Map viewers, WMS services, downloadable shapefiles",
    "crumbs": [
      "Home",
      "Data Sources"
    ]
  },
  {
    "objectID": "DataSources.html#spatial-hub-improvement-service",
    "href": "DataSources.html#spatial-hub-improvement-service",
    "title": "Data Sources",
    "section": "3. Spatial Hub (Improvement Service)",
    "text": "3. Spatial Hub (Improvement Service)\nAggregates and publishes spatial data provided by all 32 Scottish local authorities.\nData Available: - Planning applications - Housing land audits - School catchments - Local development plans - Data formats: Shapefiles, WMS, GeoJSON (registration may be required)",
    "crumbs": [
      "Home",
      "Data Sources"
    ]
  },
  {
    "objectID": "DataSources.html#uk-government-data-portal-data.gov.uk",
    "href": "DataSources.html#uk-government-data-portal-data.gov.uk",
    "title": "Data Sources",
    "section": "4. UK Government Data Portal (data.gov.uk)",
    "text": "4. UK Government Data Portal (data.gov.uk)\nThe central open data portal for the UK government.\nData Available: - Transport networks - Health and social care - Demographics and census - Crime and safety - Environment and energy - Formats: CSV, GeoJSON, Shapefiles, APIs, WMS/WFS services",
    "crumbs": [
      "Home",
      "Data Sources"
    ]
  },
  {
    "objectID": "DataSources.html#ordnance-survey-opendata",
    "href": "DataSources.html#ordnance-survey-opendata",
    "title": "Data Sources",
    "section": "5. Ordnance Survey OpenData",
    "text": "5. Ordnance Survey OpenData\nThe UK‚Äôs national mapping agency providing a range of open and premium geographic datasets.\nData Available: - OpenMap Local (general-purpose vector mapping) - OS Open Roads, OS Open Rivers - Boundary-Line (administrative boundaries) - Access via: Downloads, APIs, and ArcGIS-ready formats",
    "crumbs": [
      "Home",
      "Data Sources"
    ]
  },
  {
    "objectID": "DataSources.html#national-records-of-scotland-nrs-geography",
    "href": "DataSources.html#national-records-of-scotland-nrs-geography",
    "title": "Data Sources",
    "section": "6. National Records of Scotland (NRS) Geography",
    "text": "6. National Records of Scotland (NRS) Geography\nProvides the official statistical geographies for Scotland.\nData Available: - Data zones and Intermediate Zones - Census output areas - Health boards, local authorities - Formats: Shapefiles, GeoJSON",
    "crumbs": [
      "Home",
      "Data Sources"
    ]
  },
  {
    "objectID": "DataSources.html#office-for-national-statistics-ons-geography",
    "href": "DataSources.html#office-for-national-statistics-ons-geography",
    "title": "Data Sources",
    "section": "7. Office for National Statistics (ONS) Geography",
    "text": "7. Office for National Statistics (ONS) Geography\nGeospatial portal from the ONS offering boundary data and census geography.\nData Available: - Statistical geographies (LSOA, MSOA) - Census 2011 and 2021 boundaries - Parliamentary constituencies - Downloadable in ESRI Shapefile and GeoPackage formats",
    "crumbs": [
      "Home",
      "Data Sources"
    ]
  },
  {
    "objectID": "DataSources.html#defra-data-services-platform",
    "href": "DataSources.html#defra-data-services-platform",
    "title": "Data Sources",
    "section": "8. DEFRA Data Services Platform",
    "text": "8. DEFRA Data Services Platform\nUK Government‚Äôs portal for environment-related data and services.\nData Available: - Flood risk zones - Agricultural land classification - River networks and water quality - Waste and recycling facilities - Access via: Shapefiles, APIs, WMS/WFS",
    "crumbs": [
      "Home",
      "Data Sources"
    ]
  },
  {
    "objectID": "DataSources.html#openstreetmap-geofabrik-uk-extracts",
    "href": "DataSources.html#openstreetmap-geofabrik-uk-extracts",
    "title": "Data Sources",
    "section": "9. OpenStreetMap (Geofabrik UK Extracts)",
    "text": "9. OpenStreetMap (Geofabrik UK Extracts)\nExtracts from OpenStreetMap for Great Britain, including Scotland.\nData Available: - Buildings, highways, land use, points of interest - Routable and editable map data - Formats: .osm.pbf, shapefiles (via tools like osmconvert or QGIS plugins)",
    "crumbs": [
      "Home",
      "Data Sources"
    ]
  },
  {
    "objectID": "DataSources.html#edinburgh-geoportal",
    "href": "DataSources.html#edinburgh-geoportal",
    "title": "Data Sources",
    "section": "10. Edinburgh GeoPortal",
    "text": "10. Edinburgh GeoPortal\nA geospatial data repository from Edinburgh with open datasets.\nData Available: - Local and global environmental data - Terrain and elevation - Land cover and vegetation indexes - Datasets relevant for climate change, ecology, and earth observation",
    "crumbs": [
      "Home",
      "Data Sources"
    ]
  },
  {
    "objectID": "DataSources.html#glasgow-geoportal",
    "href": "DataSources.html#glasgow-geoportal",
    "title": "Data Sources",
    "section": "11. Glasgow GeoPortal",
    "text": "11. Glasgow GeoPortal\nA geospatial data repository from Glasgow with open datasets.\nData Available: - Local and global environmental data - Terrain and elevation - Land cover and vegetation indexes - Datasets relevant for climate change, ecology, and earth observation",
    "crumbs": [
      "Home",
      "Data Sources"
    ]
  },
  {
    "objectID": "DataSources.html#arcgis-living-atlas-uk-content",
    "href": "DataSources.html#arcgis-living-atlas-uk-content",
    "title": "Data Sources",
    "section": "12. ArcGIS Living Atlas (UK content)",
    "text": "12. ArcGIS Living Atlas (UK content)\nESRI‚Äôs curated collection of geographic information, including UK-specific content.\nData Available: - Demographics, base maps, boundaries - Real-time environmental data - Accessible directly from ArcGIS Online for instant use",
    "crumbs": [
      "Home",
      "Data Sources"
    ]
  },
  {
    "objectID": "DataSources.html#arcgis-living-atlas-uk-content-1",
    "href": "DataSources.html#arcgis-living-atlas-uk-content-1",
    "title": "Data Sources",
    "section": "13. ArcGIS Living Atlas (UK content)",
    "text": "13. ArcGIS Living Atlas (UK content)\nESRI‚Äôs curated collection of geographic information, including UK-specific content.\nData Available: - Demographics, base maps, boundaries - Real-time environmental data - Accessible directly from ArcGIS Online for instant use",
    "crumbs": [
      "Home",
      "Data Sources"
    ]
  },
  {
    "objectID": "DataSources.html#urban-big-data-centre",
    "href": "DataSources.html#urban-big-data-centre",
    "title": "Data Sources",
    "section": "14. Urban Big Data Centre",
    "text": "14. Urban Big Data Centre\nUrban Big Data Centre is a dynamic national research hub and data service, championing the use of smart data to inform policymaking and enhance the quality of urban life.\nData Available: - Transport and Mobility, Housing and property, Labor Market, Environment.",
    "crumbs": [
      "Home",
      "Data Sources"
    ]
  },
  {
    "objectID": "DataSources.html#tips-for-students",
    "href": "DataSources.html#tips-for-students",
    "title": "Data Sources",
    "section": "Tips for students",
    "text": "Tips for students\n\nMany of these platforms offer shapefiles, WMS or ArcGIS REST endpoints, which can be added directly to your ArcGIS Online web map.\nMake sure to always cite the data source in your apps or reports.\nFor reproducibility, record the download date and dataset version.\nUse filtering and geoprocessing tools in ArcGIS Online to tailor data to your study area.",
    "crumbs": [
      "Home",
      "Data Sources"
    ]
  },
  {
    "objectID": "troubleshooting.html",
    "href": "troubleshooting.html",
    "title": "Troubleshooting Guide",
    "section": "",
    "text": "Before Seeking Help\nYou should complete this checklist:",
    "crumbs": [
      "Home",
      "Troubleshooting Guide"
    ]
  },
  {
    "objectID": "troubleshooting.html#pdf-generation",
    "href": "troubleshooting.html#pdf-generation",
    "title": "Troubleshooting Guide",
    "section": "PDF Generation",
    "text": "PDF Generation\nYou are required to submit your work as report to MMS in a PDF format, and most of the outcomes created in this modules are Jupyter Notebooks, so you will need to export them as PDF. This environment includes comprehensive PDF generation capabilities for creating professional scientific documents from Jupyter notebooks. This includes:\n\nLaTeX-based PDF generation for high-quality academic formatting\nWeb-based PDF conversion for quick exports\nScientific document formatting with proper citations and references\nProfessional layout templates for reports and dissertations\n\n\nTesting PDF Generation\nAfter setting up your environment, test the PDF generation capabilities:\n\nOpen a terminal or command prompt windows.\nRun python TestingPDFCapabilities.py.\n\n\n\nConverting Notebooks to PDF\n\nMethod 1: Command Line (Recommended)\n# Activate environment\nconda activate gg3209\n\n# Convert notebook to PDF via LaTeX\njupyter nbconvert --to pdf your_notebook.ipynb\n\n#If the last one failed, try\njupyter nbconvert --to webpdf --allow-chromium-download your_notebook.ipynb\n\n#If both fail, check the options provided in the troubleshooting section for PDFs\n\n# Convert with custom template, optional\njupyter nbconvert --to pdf --template classic your_notebook.ipynb\n\n# Convert with bibliography support, optional.\njupyter nbconvert --to pdf --template article your_notebook.ipynb\n\n\nMethod 2: Jupyter Lab Interface (also recommended)\n\nOpen your notebook in Jupyter Lab\nGo to File &gt; Export Notebook As &gt; WebPDF\nChoose export options\nSave the generated PDF\n\n\n\nMethod 3: Programmatic Conversion (for advanced users)\nimport nbformat\nfrom nbconvert import PDFExporter\n\n# Read notebook\nwith open('your_notebook.ipynb', 'r') as f:\n    nb = nbformat.read(f, as_version=4)\n\n# Convert to PDF\npdf_exporter = PDFExporter()\npdf_exporter.template_name = 'classic'\n(body, resources) = pdf_exporter.from_notebook_node(nb)\n\n# Save PDF\nwith open('output.pdf', 'wb') as f:\n    f.write(body)\n\n\n\nProfessional PDF Features\n\n\nCreating Professional Reports\n\nTemplate Structure\nTo create a template notebook with:\n# Report template structure\n\"\"\"\n# Title: Professional Spatial Data Science Report\n## Author: Your Name\n## Date: Current Date\n## Abstract\nBrief description of the analysis...\n\n## 1. Introduction\nResearch question and objectives...\n\n## 2. Methodology\n### 2.1 Data Sources\n### 2.2 Analytical Methods\n### 2.3 Software and Tools\n\n## 3. Results\n### 3.1 Descriptive Statistics\n### 3.2 Spatial Analysis\n### 3.3 Hotspot Analysis\n\n## 4. Discussion\nInterpretation of results...\n\n## 5. Conclusions\nSummary and recommendations...\n\n## References\nAcademic citations...\n\n## Appendices\nAdditional materials...\n\"\"\"\n\n\nProfessional Visualization for PDF\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Configure matplotlib for high-quality PDF output\nplt.rcParams['figure.dpi'] = 300\nplt.rcParams['savefig.dpi'] = 300\nplt.rcParams['font.size'] = 12\nplt.rcParams['axes.titlesize'] = 14\nplt.rcParams['axes.labelsize'] = 12\nplt.rcParams['xtick.labelsize'] = 10\nplt.rcParams['ytick.labelsize'] = 10\nplt.rcParams['legend.fontsize'] = 11\nplt.rcParams['figure.titlesize'] = 16\n\n# Use professional color palette\nsns.set_palette(\"husl\")\n\n# Create publication-ready figures\nfig, ax = plt.subplots(figsize=(8, 6))\n# Your plotting code here\nplt.tight_layout()\nplt.savefig('figure.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\nTroubleshooting to PDF Generation\n\nCommon Issues and Solutions\nIssue: LaTeX not found\n# Solution: Install LaTeX distribution\n# Windows: Download MiKTeX or TeX Live\n# macOS: Install MacTeX\nconda install texlive-core texlive-latex-extra\nIssue: 500 : Internal Server Error\nIssue when you try to use Export as PDF and you get errors relates to nbconvert failed:\n{bash}\npip install 'nbconvert[webpdf]'\n\njupyter nbconvert --to webpdf --allow-chromium-download YouJupyterNotebook.ipynb\n#This will create a PDF in the same folder of your Jupyter Notebook., Or use the optiopn included in Jupyter Lab. Save And Export Notebook as &gt; Webpdf\nIssue: PDF conversion fails\n# Solution: Use alternative method\njupyter nbconvert --to html your_notebook.ipynb\n# Then use browser to print to PDF\nIssue: Figures not appearing in PDF\n# Solution: Ensure figures are saved inline\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.rcParams['savefig.format'] = 'png'\nplt.rcParams['savefig.bbox'] = 'tight'\nIssue: Long code cells breaking across pages\n# Solution: Use page breaks and cell splitting\nfrom IPython.display import display, HTML\ndisplay(HTML('&lt;div style=\"page-break-before: always;\"&gt;&lt;/div&gt;'))\n\n\n\nBest Practices for PDF Generation\n\nUse consistent formatting throughout your notebook\nInclude descriptive markdown for each analysis step\nAdd figure captions and table descriptions. One of the most common issue when you create a PDF.\nTest PDF generation regularly during development\nInclude proper citations and references\nOptimize images for print quality (optional)\n\n\nThis guide was created for the GG3209 Spatial Analysis with GIS students at SGSD University of St Andrews. For questions or suggestions, please create an issue in this book repository. 2025",
    "crumbs": [
      "Home",
      "Troubleshooting Guide"
    ]
  }
]