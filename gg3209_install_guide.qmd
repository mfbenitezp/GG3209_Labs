# Step 1. Python Environment Installation {.unnumbered}

This guide provides step-by-step instructions for setting up the Python environment for second part of the **module GG3209** on Windows and macOS. The environment includes all necessary libraries for data handling, clustering, visualization, large datasets, and hotspot analysis.

**Estimated time to install:** [**20 to 30 minutes**.]{.underline}

::: callout-warning
Make sure you have an stable internet connection. If you are using **eduroam** at the university, you might experience delays or issues when the internet connection isn't stable, if that is the case make sure you have a stable connection at home to complete this process properly.
:::

## Prerequisites {#prerequisites}

Before starting, ensure you have:

-   [ ] A stable internet connection (large downloads required)

-   [ ] At least 5GB of free disk space

-   [ ] Administrator privileges on your computer

-   [ ] Basic familiarity with command line interface (we will have a show demo about this during the lectures)

::: {.callout-caution collapse="true"}
If you don't know how to validate this, please make an appointment with our IT service person who can support you with this at [gsditsupport\@st-andrews.ac.uk](gsditsupport@st-andrews.ac.uk)
:::

------------------------------------------------------------------------

## 1. Installing Miniconda

Miniconda provides a clean, minimal Python installation with only essential packages. This ensures all students start with identical environments and reduces potential conflicts. It's lightweight, fast, and gives us complete control over installed packages. The installation of this program relies on the operating system you have, thus use the instructions based on that:

### Windows Installation

1.  **Download Miniconda**:
    -   Visit <https://docs.conda.io/en/latest/miniconda.html>
    -   Download **"Miniconda3 Windows 64-bit"** (approximately 50MB)
    -   **Important**: Download the Python 3.10 version specifically
2.  **Install Miniconda**:
    -   Double-click the downloaded `.exe` file
    -   Click "Next" through the installation wizard
    -   **CRITICAL**: When asked about PATH, select **"Add Miniconda3 to my PATH environment variable"**
    -   Accept all other default settings
    -   Complete installation (takes 2-3 minutes)
3.  **Verify Installation**:
    -   Open **Command Prompt** (Press `Win + R`, type `cmd`, press Enter)
    -   Type `conda --version` and press Enter
    -   You should see: `conda 23.x.x` (or similar version number)
    -   Type `python --version` and press Enter
    -   You should see: `Python 3.10.x`

### macOS Installation

1.  **Download Miniconda**:
    -   Visit <https://docs.conda.io/en/latest/miniconda.html>
    -   **For Apple Silicon Macs (M1/M2)**: Download "Miniconda3 macOS Apple M1 64-bit pkg"
    -   **For Intel Macs**: Download "Miniconda3 macOS Intel x86 64-bit pkg"
    -   **Important**: Download the Python 3.10 version specifically
2.  **Install Miniconda**:
    -   Double-click the downloaded `.pkg` file
    -   Follow the installation wizard
    -   Accept all default settings
    -   Complete installation
3.  **Verify Installation**:
    -   Open **Terminal** (Press `Cmd + Space`, type "Terminal", press Enter)
    -   Type `conda --version` and press Enter
    -   You should see: `conda 23.x.x` (or similar version number)
    -   Type `python --version` and press Enter
    -   You should see: `Python 3.10.x`

### Post-Installation Setup (All Students)

After successful installation, run these commands to ensure consistency:

``` bash
# Update conda to latest version
conda update -n base -c defaults conda

# Configure conda for optimal performance
conda config --set auto_activate_base false
conda config --add channels conda-forge
conda config --set channel_priority strict

# Verify configuration
conda info
```

**Expected Output**: You should see conda-forge listed as a channel with highest priority.

------------------------------------------------------------------------

## 2. Creating the Environment {#creating-the-environment}

### Step 1: Download the Environment File

Save the environment configuration as `environment.yml` in a folder of your choice (e.g., `Documents/gg3209/`).

### Step 2: Open Command Line Interface

#### Windows Students

-   Press `Win + R`, type `cmd`, press Enter

-   **Alternative**: Search for "Command Prompt" in Start Menu

-   ::: callout-important
    Use Command Prompt, NOT PowerShell or other terminals
    :::

#### macOS Students

-   Press `Cmd + Space`, type "Terminal", press Enter

-   **Alternative**: Go to Applications \> Utilities \> Terminal

-   ::: callout-important
    Use Terminal, NOT other command line apps
    :::

### Step 3: Navigate to Your Project Directory

**All students should create the same folder structure:**

``` bash
# Windows students
mkdir C:\gg3209 #sds stands for spatial dtata science 
cd C:\gg3209

# macOS students
mkdir ~/gg3209
cd ~/gg3209
```

### Step 4: Download and Verify Environment File

**Before creating the environment, ensure you have the correct file:**

1.  Save the `environment.yml` file in your project directory. This file is located in Moodle, go there and download it and place it in the project directory you created earlier.
2.  Verify the file exists:

``` bash
# All students run this command
dir environment.yml    # Windows
ls environment.yml     # macOS
```

You should see the file listed. If not, ensure you saved it correctly.

### Step 5: Create the Environment (Critical Step)

**This is where consistency matters most:**

``` bash
# Create environment from file
conda env create -f environment.yml

# This will take 15-30 minutes
# You will see many packages being downloaded and installed
# Wait for "done" message before proceeding
```

**Expected Output:**

```         
Collecting package metadata (repodata.json): done
Solving environment: done
Preparing transaction: done
Verifying transaction: done
Executing transaction: done
#
# To activate this environment, use
#
#     $ conda activate spatial-data-science
#
# To deactivate an active environment, use
#
#     $ conda deactivate
```

### Step 6: Activate the Environment

**All students must activate the environment before using it – THIS IS VERY IMPORTANT:**

``` bash
# Activate the environment
conda activate gg3209
```

**Success Indicator**: Your command prompt should now show `(gg3209)` at the beginning:

``` bash
# Windows example
(gg3209) C:\gg3209>

# macOS example
(gg3209) username@computer:~/gg3209$
```

### Step 7: Final Verification

**All students run the same verification script:**

Once you have created your python environment, now it is important you test that everything is properly installed. Using the same `terminal` or `command prompt` window run the following command.

``` bash
# Make sure environment is activated (optional if you know you have activated it)
conda activate gg3209

# Run the test
python test_installation.py

------
# Windows example
(gg3209) C:\gg3209\> python verification_script.py

# macOS example
(gg3209) username@computer:~/gg3209/$ python verification_script.py
```

**Expected Output for All Students:**

```         
Python version: 3.10.x
Python location: [path to conda environment]
✓ All required libraries imported successfully!
✓ Environment setup is complete and consistent!
✓ GeoPandas version: 1.1.1
✓ Pandas version: 2.3.1
✓ NumPy version: 1.26.4
```

If successful, you should see version numbers and check-marks.

------------------------------------------------------------------------

## 3. Running Jupyter Lab {#running-jupyter-lab}

### Starting Jupyter Lab

``` bash
# Make sure environment is activated (optional if you know you have activated it)
conda activate gg3209

# Make sure you are in your project directory e.g. GG3209
cd GG3209

# Launch Jupyter Lab
jupyter lab
```

This will:

\- Start the Jupyter server

\- Open your default web browser

\- Display the Jupyter Lab interface

### Creating Your First Notebook

1.  Click "Python 3 (ipykernel)" under "Notebook"
2.  Test with a simple spatial analysis:

``` python
import geopandas as gpd
import matplotlib.pyplot as plt
import geodatasets

# Create a simple test
world = gpd.read_file(geodatasets.get_path("naturalearth.land"))
world.plot(figsize=(10, 6))
plt.title('World Map Test')
plt.show()
```

### Stopping Jupyter Lab

-   In your browser: File \> Shut Down
-   In command line: Press `Ctrl + C` (Windows) or `Cmd + C` (Mac)

------------------------------------------------------------------------

## 4. GG3209-Specific Setup Instructions

### First Day of Class Checklist

**All students must complete before first lab:**

-   [ ] **Install Miniconda** (Python 3.10)

-   [ ] **Create spatial-data-science environment**

-   [ ] **Activate environment successfully**

-   [ ] **Run verification script** (must pass)

-   [ ] **Start Jupyter Lab** (must open in browser)

-   [ ] **Create test notebook** with basic spatial analysis

### Weekly Environment Check

**Run this command weekly to ensure consistency:**

``` bash
python -c "
import geopandas as gpd
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import folium
from esda.getisord import G_Local
from sklearn.cluster import DBSCAN
print('✓ Environment is working correctly')
print(f'✓ GeoPandas version: {gpd.__version__}')
print(f'✓ Pandas version: {pd.__version__}')
"
```

### Submission Requirements

**For all assignments, include this environment information:**

``` python
# Add this cell at the top of every notebook
import sys
import geopandas as gpd
import pandas as pd

print(f"Python version: {sys.version}")
print(f"GeoPandas version: {gpd.__version__}")
print(f"Pandas version: {pd.__version__}")
print(f"Environment: gg3209")
```

------------------------------------------------------------------------

## 5. Next Steps

Once your environment is set up:

1.  **Complete the verification tests**
2.  **Try the sample notebook**
3.  **Explore the example datasets (Data Sources section)**
4.  **Begin the Guideline Introduction to GIT**
5.  **Now you are all set to start with Lab No 1, Lab No 2...and so on**
6.  **Make sure you push your changes, updates and work regularly to your Repo in GitHub.**

::: callout-note
Your python environment for this course `GG3209` is now ready. Now you need to install GIT and create a GitHub account to have everything you need to practice all your Python skills., there are some steps you need to recall while you work on this course, but with practice you will eventually memorise most of the critial steps.

Move to Step No 2.
:::

------------------------------------------------------------------------

## Useful resources

### Learning Materials

-   **Geopandas Documentation**: <https://geopandas.org/>
-   **PySAL Documentation**: <https://pysal.org/>
-   **Spatial Data Science Book**: <https://geographicdata.science/book/>

### Data Sources

-   **Natural Earth**: <https://www.naturalearthdata.com/>
-   **OpenStreetMap**: <https://www.openstreetmap.org/>
-   **Census Data**: <https://www.census.gov/>

### Community Support

-   **Stack Overflow**: Use tags `geopandas`, `spatial-analysis`, `python`
-   **GitHub Issues**: For specific library problems
-   **Reddit**: r/gis and r/Python communities

------------------------------------------------------------------------

*This guide was created for the GG3209 Spatial Analysis with GIS students at SGSD University of St Andrews. For questions or suggestions, please create an issue in this book repository. 2025*
